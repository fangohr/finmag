// This code conforms with the UFC specification version 2.0.5
// and was automatically generated by FFC version 1.0.0.
// 
// This code was generated with the following parameters:
// 
//   cache_dir:                      ''
//   convert_exceptions_to_warnings: False
//   cpp_optimize:                   False
//   cpp_optimize_flags:             '-O2'
//   epsilon:                        1e-14
//   error_control:                  False
//   form_postfix:                   False
//   format:                         'ufc'
//   log_level:                      25
//   log_prefix:                     ''
//   name:                           'ffc'
//   no-evaluate_basis_derivatives:  True
//   optimize:                       False
//   output_dir:                     '.'
//   precision:                      15
//   quadrature_degree:              -1
//   quadrature_rule:                'auto'
//   representation:                 'auto'
//   split:                          False
//   swig_binary:                    'swig2.0'
//   swig_path:                      ''

#ifndef __FFC_FORM_093E70CCB31B6928BA64954C37AE6FA88F3DF017_H
#define __FFC_FORM_093E70CCB31B6928BA64954C37AE6FA88F3DF017_H

#include <cmath>
#include <stdexcept>
#include <fstream>
#include <ufc.h>

/// This class defines the interface for a finite element.

class ffc_form_093e70ccb31b6928ba64954c37ae6fa88f3df017_finite_element_0: public ufc::finite_element
{
public:

  /// Constructor
  ffc_form_093e70ccb31b6928ba64954c37ae6fa88f3df017_finite_element_0() : ufc::finite_element()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ffc_form_093e70ccb31b6928ba64954c37ae6fa88f3df017_finite_element_0()
  {
    // Do nothing
  }

  /// Return a string identifying the finite element
  virtual const char* signature() const
  {
    return "FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None)";
  }

  /// Return the cell shape
  virtual ufc::shape cell_shape() const
  {
    return ufc::tetrahedron;
  }

  /// Return the topological dimension of the cell shape
  virtual unsigned int topological_dimension() const
  {
    return 3;
  }

  /// Return the geometric dimension of the cell shape
  virtual unsigned int geometric_dimension() const
  {
    return 3;
  }

  /// Return the dimension of the finite element function space
  virtual unsigned int space_dimension() const
  {
    return 4;
  }

  /// Return the rank of the value space
  virtual unsigned int value_rank() const
  {
    return 0;
  }

  /// Return the dimension of the value space for axis i
  virtual unsigned int value_dimension(unsigned int i) const
  {
    return 1;
  }

  /// Evaluate basis function i at given point in cell
  virtual void evaluate_basis(unsigned int i,
                              double* values,
                              const double* coordinates,
                              const ufc::cell& c) const
  {
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = x[1][0] - x[0][0];
    const double J_01 = x[2][0] - x[0][0];
    const double J_02 = x[3][0] - x[0][0];
    const double J_10 = x[1][1] - x[0][1];
    const double J_11 = x[2][1] - x[0][1];
    const double J_12 = x[3][1] - x[0][1];
    const double J_20 = x[1][2] - x[0][2];
    const double J_21 = x[2][2] - x[0][2];
    const double J_22 = x[3][2] - x[0][2];
    
    // Compute sub determinants
    const double d_00 = J_11*J_22 - J_12*J_21;
    const double d_01 = J_12*J_20 - J_10*J_22;
    const double d_02 = J_10*J_21 - J_11*J_20;
    const double d_10 = J_02*J_21 - J_01*J_22;
    const double d_11 = J_00*J_22 - J_02*J_20;
    const double d_12 = J_01*J_20 - J_00*J_21;
    const double d_20 = J_01*J_12 - J_02*J_11;
    const double d_21 = J_02*J_10 - J_00*J_12;
    const double d_22 = J_00*J_11 - J_01*J_10;
    
    // Compute determinant of Jacobian
    double detJ = J_00*d_00 + J_10*d_10 + J_20*d_20;
    
    // Compute inverse of Jacobian
    
    // Compute constants
    const double C0 = x[3][0] + x[2][0] + x[1][0] - x[0][0];
    const double C1 = x[3][1] + x[2][1] + x[1][1] - x[0][1];
    const double C2 = x[3][2] + x[2][2] + x[1][2] - x[0][2];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (d_00*(2.0*coordinates[0] - C0) + d_10*(2.0*coordinates[1] - C1) + d_20*(2.0*coordinates[2] - C2)) / detJ;
    double Y = (d_01*(2.0*coordinates[0] - C0) + d_11*(2.0*coordinates[1] - C1) + d_21*(2.0*coordinates[2] - C2)) / detJ;
    double Z = (d_02*(2.0*coordinates[0] - C0) + d_12*(2.0*coordinates[1] - C1) + d_22*(2.0*coordinates[2] - C2)) / detJ;
    
    
    // Reset values.
    *values = 0.0;
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, -0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 4; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, 0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 4; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.210818510677892, -0.074535599249993};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 4; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.0, 0.223606797749979};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 4; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    }
    
  }

  /// Evaluate all basis functions at given point in cell
  virtual void evaluate_basis_all(double* values,
                                  const double* coordinates,
                                  const ufc::cell& c) const
  {
    // Helper variable to hold values of a single dof.
    double dof_values = 0.0;
    
    // Loop dofs and call evaluate_basis.
    for (unsigned int r = 0; r < 4; r++)
    {
      evaluate_basis(r, &dof_values, coordinates, c);
      values[r] = dof_values;
    }// end loop over 'r'
  }

  /// Evaluate order n derivatives of basis function i at given point in cell
  virtual void evaluate_basis_derivatives(unsigned int i,
                                          unsigned int n,
                                          double* values,
                                          const double* coordinates,
                                          const ufc::cell& c) const
  {
throw std::runtime_error("// Function evaluate_basis_derivatives not generated (compiled with -fno-evaluate_basis_derivatives)");
  }

  /// Evaluate order n derivatives of all basis functions at given point in cell
  virtual void evaluate_basis_derivatives_all(unsigned int n,
                                              double* values,
                                              const double* coordinates,
                                              const ufc::cell& c) const
  {
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 3;
    }// end loop over 'r'
    
    // Helper variable to hold values of a single dof.
    double *dof_values = new double[num_derivatives];
    for (unsigned int r = 0; r < num_derivatives; r++)
    {
      dof_values[r] = 0.0;
    }// end loop over 'r'
    
    // Loop dofs and call evaluate_basis_derivatives.
    for (unsigned int r = 0; r < 4; r++)
    {
      evaluate_basis_derivatives(r, n, dof_values, coordinates, c);
      for (unsigned int s = 0; s < num_derivatives; s++)
      {
        values[r*num_derivatives + s] = dof_values[s];
      }// end loop over 's'
    }// end loop over 'r'
    
    // Delete pointer.
    delete [] dof_values;
  }

  /// Evaluate linear functional for dof i on the function f
  virtual double evaluate_dof(unsigned int i,
                              const ufc::function& f,
                              const ufc::cell& c) const
  {
    // Declare variables for result of evaluation.
    double vals[1];
    
    // Declare variable for physical coordinates.
    double y[3];
    const double * const * x = c.coordinates;
    switch (i)
    {
    case 0:
      {
        y[0] = x[0][0];
      y[1] = x[0][1];
      y[2] = x[0][2];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 1:
      {
        y[0] = x[1][0];
      y[1] = x[1][1];
      y[2] = x[1][2];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 2:
      {
        y[0] = x[2][0];
      y[1] = x[2][1];
      y[2] = x[2][2];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 3:
      {
        y[0] = x[3][0];
      y[1] = x[3][1];
      y[2] = x[3][2];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    }
    
    return 0.0;
  }

  /// Evaluate linear functionals for all dofs on the function f
  virtual void evaluate_dofs(double* values,
                             const ufc::function& f,
                             const ufc::cell& c) const
  {
    // Declare variables for result of evaluation.
    double vals[1];
    
    // Declare variable for physical coordinates.
    double y[3];
    const double * const * x = c.coordinates;
    y[0] = x[0][0];
    y[1] = x[0][1];
    y[2] = x[0][2];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = x[1][0];
    y[1] = x[1][1];
    y[2] = x[1][2];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = x[2][0];
    y[1] = x[2][1];
    y[2] = x[2][2];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = x[3][0];
    y[1] = x[3][1];
    y[2] = x[3][2];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
  }

  /// Interpolate vertex values from dof values
  virtual void interpolate_vertex_values(double* vertex_values,
                                         const double* dof_values,
                                         const ufc::cell& c) const
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
    vertex_values[3] = dof_values[3];
  }

  /// Map coordinate xhat from reference cell to coordinate x in cell
  virtual void map_from_reference_cell(double* x,
                                       const double* xhat,
                                       const ufc::cell& c) const
  {
    throw std::runtime_error("map_from_reference_cell not yet implemented (introduced in UFC 2.0).");
  }

  /// Map from coordinate x in cell to coordinate xhat in reference cell
  virtual void map_to_reference_cell(double* xhat,
                                     const double* x,
                                     const ufc::cell& c) const
  {
    throw std::runtime_error("map_to_reference_cell not yet implemented (introduced in UFC 2.0).");
  }

  /// Return the number of sub elements (for a mixed element)
  virtual unsigned int num_sub_elements() const
  {
    return 0;
  }

  /// Create a new finite element for sub element i (for a mixed element)
  virtual ufc::finite_element* create_sub_element(unsigned int i) const
  {
    return 0;
  }

  /// Create a new class instance
  virtual ufc::finite_element* create() const
  {
    return new ffc_form_093e70ccb31b6928ba64954c37ae6fa88f3df017_finite_element_0();
  }

};

/// This class defines the interface for a finite element.

class ffc_form_093e70ccb31b6928ba64954c37ae6fa88f3df017_finite_element_1: public ufc::finite_element
{
public:

  /// Constructor
  ffc_form_093e70ccb31b6928ba64954c37ae6fa88f3df017_finite_element_1() : ufc::finite_element()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ffc_form_093e70ccb31b6928ba64954c37ae6fa88f3df017_finite_element_1()
  {
    // Do nothing
  }

  /// Return a string identifying the finite element
  virtual const char* signature() const
  {
    return "MixedElement(*[FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None)], **{'value_shape': (2,) })";
  }

  /// Return the cell shape
  virtual ufc::shape cell_shape() const
  {
    return ufc::tetrahedron;
  }

  /// Return the topological dimension of the cell shape
  virtual unsigned int topological_dimension() const
  {
    return 3;
  }

  /// Return the geometric dimension of the cell shape
  virtual unsigned int geometric_dimension() const
  {
    return 3;
  }

  /// Return the dimension of the finite element function space
  virtual unsigned int space_dimension() const
  {
    return 8;
  }

  /// Return the rank of the value space
  virtual unsigned int value_rank() const
  {
    return 1;
  }

  /// Return the dimension of the value space for axis i
  virtual unsigned int value_dimension(unsigned int i) const
  {
    switch (i)
    {
    case 0:
      {
        return 2;
        break;
      }
    }
    
    return 0;
  }

  /// Evaluate basis function i at given point in cell
  virtual void evaluate_basis(unsigned int i,
                              double* values,
                              const double* coordinates,
                              const ufc::cell& c) const
  {
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = x[1][0] - x[0][0];
    const double J_01 = x[2][0] - x[0][0];
    const double J_02 = x[3][0] - x[0][0];
    const double J_10 = x[1][1] - x[0][1];
    const double J_11 = x[2][1] - x[0][1];
    const double J_12 = x[3][1] - x[0][1];
    const double J_20 = x[1][2] - x[0][2];
    const double J_21 = x[2][2] - x[0][2];
    const double J_22 = x[3][2] - x[0][2];
    
    // Compute sub determinants
    const double d_00 = J_11*J_22 - J_12*J_21;
    const double d_01 = J_12*J_20 - J_10*J_22;
    const double d_02 = J_10*J_21 - J_11*J_20;
    const double d_10 = J_02*J_21 - J_01*J_22;
    const double d_11 = J_00*J_22 - J_02*J_20;
    const double d_12 = J_01*J_20 - J_00*J_21;
    const double d_20 = J_01*J_12 - J_02*J_11;
    const double d_21 = J_02*J_10 - J_00*J_12;
    const double d_22 = J_00*J_11 - J_01*J_10;
    
    // Compute determinant of Jacobian
    double detJ = J_00*d_00 + J_10*d_10 + J_20*d_20;
    
    // Compute inverse of Jacobian
    
    // Compute constants
    const double C0 = x[3][0] + x[2][0] + x[1][0] - x[0][0];
    const double C1 = x[3][1] + x[2][1] + x[1][1] - x[0][1];
    const double C2 = x[3][2] + x[2][2] + x[1][2] - x[0][2];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (d_00*(2.0*coordinates[0] - C0) + d_10*(2.0*coordinates[1] - C1) + d_20*(2.0*coordinates[2] - C2)) / detJ;
    double Y = (d_01*(2.0*coordinates[0] - C0) + d_11*(2.0*coordinates[1] - C1) + d_21*(2.0*coordinates[2] - C2)) / detJ;
    double Z = (d_02*(2.0*coordinates[0] - C0) + d_12*(2.0*coordinates[1] - C1) + d_22*(2.0*coordinates[2] - C2)) / detJ;
    
    
    // Reset values.
    values[0] = 0.0;
    values[1] = 0.0;
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, -0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 4; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, 0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 4; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.210818510677892, -0.074535599249993};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 4; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.0, 0.223606797749979};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 4; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 4:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, -0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 4; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 5:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, 0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 4; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 6:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.210818510677892, -0.074535599249993};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 4; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 7:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.0, 0.223606797749979};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 4; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    }
    
  }

  /// Evaluate all basis functions at given point in cell
  virtual void evaluate_basis_all(double* values,
                                  const double* coordinates,
                                  const ufc::cell& c) const
  {
    // Helper variable to hold values of a single dof.
    double dof_values[2] = {0.0, 0.0};
    
    // Loop dofs and call evaluate_basis.
    for (unsigned int r = 0; r < 8; r++)
    {
      evaluate_basis(r, dof_values, coordinates, c);
      for (unsigned int s = 0; s < 2; s++)
      {
        values[r*2 + s] = dof_values[s];
      }// end loop over 's'
    }// end loop over 'r'
  }

  /// Evaluate order n derivatives of basis function i at given point in cell
  virtual void evaluate_basis_derivatives(unsigned int i,
                                          unsigned int n,
                                          double* values,
                                          const double* coordinates,
                                          const ufc::cell& c) const
  {
throw std::runtime_error("// Function evaluate_basis_derivatives not generated (compiled with -fno-evaluate_basis_derivatives)");
  }

  /// Evaluate order n derivatives of all basis functions at given point in cell
  virtual void evaluate_basis_derivatives_all(unsigned int n,
                                              double* values,
                                              const double* coordinates,
                                              const ufc::cell& c) const
  {
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 3;
    }// end loop over 'r'
    
    // Helper variable to hold values of a single dof.
    double *dof_values = new double[2*num_derivatives];
    for (unsigned int r = 0; r < 2*num_derivatives; r++)
    {
      dof_values[r] = 0.0;
    }// end loop over 'r'
    
    // Loop dofs and call evaluate_basis_derivatives.
    for (unsigned int r = 0; r < 8; r++)
    {
      evaluate_basis_derivatives(r, n, dof_values, coordinates, c);
      for (unsigned int s = 0; s < 2*num_derivatives; s++)
      {
        values[r*2*num_derivatives + s] = dof_values[s];
      }// end loop over 's'
    }// end loop over 'r'
    
    // Delete pointer.
    delete [] dof_values;
  }

  /// Evaluate linear functional for dof i on the function f
  virtual double evaluate_dof(unsigned int i,
                              const ufc::function& f,
                              const ufc::cell& c) const
  {
    // Declare variables for result of evaluation.
    double vals[2];
    
    // Declare variable for physical coordinates.
    double y[3];
    const double * const * x = c.coordinates;
    switch (i)
    {
    case 0:
      {
        y[0] = x[0][0];
      y[1] = x[0][1];
      y[2] = x[0][2];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 1:
      {
        y[0] = x[1][0];
      y[1] = x[1][1];
      y[2] = x[1][2];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 2:
      {
        y[0] = x[2][0];
      y[1] = x[2][1];
      y[2] = x[2][2];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 3:
      {
        y[0] = x[3][0];
      y[1] = x[3][1];
      y[2] = x[3][2];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 4:
      {
        y[0] = x[0][0];
      y[1] = x[0][1];
      y[2] = x[0][2];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 5:
      {
        y[0] = x[1][0];
      y[1] = x[1][1];
      y[2] = x[1][2];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 6:
      {
        y[0] = x[2][0];
      y[1] = x[2][1];
      y[2] = x[2][2];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 7:
      {
        y[0] = x[3][0];
      y[1] = x[3][1];
      y[2] = x[3][2];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    }
    
    return 0.0;
  }

  /// Evaluate linear functionals for all dofs on the function f
  virtual void evaluate_dofs(double* values,
                             const ufc::function& f,
                             const ufc::cell& c) const
  {
    // Declare variables for result of evaluation.
    double vals[2];
    
    // Declare variable for physical coordinates.
    double y[3];
    const double * const * x = c.coordinates;
    y[0] = x[0][0];
    y[1] = x[0][1];
    y[2] = x[0][2];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = x[1][0];
    y[1] = x[1][1];
    y[2] = x[1][2];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = x[2][0];
    y[1] = x[2][1];
    y[2] = x[2][2];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = x[3][0];
    y[1] = x[3][1];
    y[2] = x[3][2];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
    y[0] = x[0][0];
    y[1] = x[0][1];
    y[2] = x[0][2];
    f.evaluate(vals, y, c);
    values[4] = vals[1];
    y[0] = x[1][0];
    y[1] = x[1][1];
    y[2] = x[1][2];
    f.evaluate(vals, y, c);
    values[5] = vals[1];
    y[0] = x[2][0];
    y[1] = x[2][1];
    y[2] = x[2][2];
    f.evaluate(vals, y, c);
    values[6] = vals[1];
    y[0] = x[3][0];
    y[1] = x[3][1];
    y[2] = x[3][2];
    f.evaluate(vals, y, c);
    values[7] = vals[1];
  }

  /// Interpolate vertex values from dof values
  virtual void interpolate_vertex_values(double* vertex_values,
                                         const double* dof_values,
                                         const ufc::cell& c) const
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[2] = dof_values[1];
    vertex_values[4] = dof_values[2];
    vertex_values[6] = dof_values[3];
    // Evaluate function and change variables
    vertex_values[1] = dof_values[4];
    vertex_values[3] = dof_values[5];
    vertex_values[5] = dof_values[6];
    vertex_values[7] = dof_values[7];
  }

  /// Map coordinate xhat from reference cell to coordinate x in cell
  virtual void map_from_reference_cell(double* x,
                                       const double* xhat,
                                       const ufc::cell& c) const
  {
    throw std::runtime_error("map_from_reference_cell not yet implemented (introduced in UFC 2.0).");
  }

  /// Map from coordinate x in cell to coordinate xhat in reference cell
  virtual void map_to_reference_cell(double* xhat,
                                     const double* x,
                                     const ufc::cell& c) const
  {
    throw std::runtime_error("map_to_reference_cell not yet implemented (introduced in UFC 2.0).");
  }

  /// Return the number of sub elements (for a mixed element)
  virtual unsigned int num_sub_elements() const
  {
    return 2;
  }

  /// Create a new finite element for sub element i (for a mixed element)
  virtual ufc::finite_element* create_sub_element(unsigned int i) const
  {
    switch (i)
    {
    case 0:
      {
        return new ffc_form_093e70ccb31b6928ba64954c37ae6fa88f3df017_finite_element_0();
        break;
      }
    case 1:
      {
        return new ffc_form_093e70ccb31b6928ba64954c37ae6fa88f3df017_finite_element_0();
        break;
      }
    }
    
    return 0;
  }

  /// Create a new class instance
  virtual ufc::finite_element* create() const
  {
    return new ffc_form_093e70ccb31b6928ba64954c37ae6fa88f3df017_finite_element_1();
  }

};

/// This class defines the interface for a local-to-global mapping of
/// degrees of freedom (dofs).

class ffc_form_093e70ccb31b6928ba64954c37ae6fa88f3df017_dofmap_0: public ufc::dofmap
{
private:

  unsigned int _global_dimension;
public:

  /// Constructor
  ffc_form_093e70ccb31b6928ba64954c37ae6fa88f3df017_dofmap_0() : ufc::dofmap()
  {
    _global_dimension = 0;
  }

  /// Destructor
  virtual ~ffc_form_093e70ccb31b6928ba64954c37ae6fa88f3df017_dofmap_0()
  {
    // Do nothing
  }

  /// Return a string identifying the dofmap
  virtual const char* signature() const
  {
    return "FFC dofmap for FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None)";
  }

  /// Return true iff mesh entities of topological dimension d are needed
  virtual bool needs_mesh_entities(unsigned int d) const
  {
    switch (d)
    {
    case 0:
      {
        return true;
        break;
      }
    case 1:
      {
        return false;
        break;
      }
    case 2:
      {
        return false;
        break;
      }
    case 3:
      {
        return false;
        break;
      }
    }
    
    return false;
  }

  /// Initialize dofmap for mesh (return true iff init_cell() is needed)
  virtual bool init_mesh(const ufc::mesh& m)
  {
    _global_dimension = m.num_entities[0];
    return false;
  }

  /// Initialize dofmap for given cell
  virtual void init_cell(const ufc::mesh& m,
                         const ufc::cell& c)
  {
    // Do nothing
  }

  /// Finish initialization of dofmap for cells
  virtual void init_cell_finalize()
  {
    // Do nothing
  }

  /// Return the topological dimension of the associated cell shape
  virtual unsigned int topological_dimension() const
  {
    return 3;
  }

  /// Return the geometric dimension of the associated cell shape
  virtual unsigned int geometric_dimension() const
  {
    return 3;
  }

  /// Return the dimension of the global finite element function space
  virtual unsigned int global_dimension() const
  {
    return _global_dimension;
  }

  /// Return the dimension of the local finite element function space for a cell
  virtual unsigned int local_dimension(const ufc::cell& c) const
  {
    return 4;
  }

  /// Return the maximum dimension of the local finite element function space
  virtual unsigned int max_local_dimension() const
  {
    return 4;
  }

  /// Return the number of dofs on each cell facet
  virtual unsigned int num_facet_dofs() const
  {
    return 3;
  }

  /// Return the number of dofs associated with each cell entity of dimension d
  virtual unsigned int num_entity_dofs(unsigned int d) const
  {
    switch (d)
    {
    case 0:
      {
        return 1;
        break;
      }
    case 1:
      {
        return 0;
        break;
      }
    case 2:
      {
        return 0;
        break;
      }
    case 3:
      {
        return 0;
        break;
      }
    }
    
    return 0;
  }

  /// Tabulate the local-to-global mapping of dofs on a cell
  virtual void tabulate_dofs(unsigned int* dofs,
                             const ufc::mesh& m,
                             const ufc::cell& c) const
  {
    dofs[0] = c.entity_indices[0][0];
    dofs[1] = c.entity_indices[0][1];
    dofs[2] = c.entity_indices[0][2];
    dofs[3] = c.entity_indices[0][3];
  }

  /// Tabulate the local-to-local mapping from facet dofs to cell dofs
  virtual void tabulate_facet_dofs(unsigned int* dofs,
                                   unsigned int facet) const
  {
    switch (facet)
    {
    case 0:
      {
        dofs[0] = 1;
      dofs[1] = 2;
      dofs[2] = 3;
        break;
      }
    case 1:
      {
        dofs[0] = 0;
      dofs[1] = 2;
      dofs[2] = 3;
        break;
      }
    case 2:
      {
        dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 3;
        break;
      }
    case 3:
      {
        dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 2;
        break;
      }
    }
    
  }

  /// Tabulate the local-to-local mapping of dofs on entity (d, i)
  virtual void tabulate_entity_dofs(unsigned int* dofs,
                                    unsigned int d, unsigned int i) const
  {
    if (d > 3)
    {
    throw std::runtime_error("d is larger than dimension (3)");
    }
    
    switch (d)
    {
    case 0:
      {
        if (i > 3)
      {
      throw std::runtime_error("i is larger than number of entities (3)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 0;
          break;
        }
      case 1:
        {
          dofs[0] = 1;
          break;
        }
      case 2:
        {
          dofs[0] = 2;
          break;
        }
      case 3:
        {
          dofs[0] = 3;
          break;
        }
      }
      
        break;
      }
    case 1:
      {
        
        break;
      }
    case 2:
      {
        
        break;
      }
    case 3:
      {
        
        break;
      }
    }
    
  }

  /// Tabulate the coordinates of all dofs on a cell
  virtual void tabulate_coordinates(double** coordinates,
                                    const ufc::cell& c) const
  {
    const double * const * x = c.coordinates;
    
    coordinates[0][0] = x[0][0];
    coordinates[0][1] = x[0][1];
    coordinates[0][2] = x[0][2];
    coordinates[1][0] = x[1][0];
    coordinates[1][1] = x[1][1];
    coordinates[1][2] = x[1][2];
    coordinates[2][0] = x[2][0];
    coordinates[2][1] = x[2][1];
    coordinates[2][2] = x[2][2];
    coordinates[3][0] = x[3][0];
    coordinates[3][1] = x[3][1];
    coordinates[3][2] = x[3][2];
  }

  /// Return the number of sub dofmaps (for a mixed element)
  virtual unsigned int num_sub_dofmaps() const
  {
    return 0;
  }

  /// Create a new dofmap for sub dofmap i (for a mixed element)
  virtual ufc::dofmap* create_sub_dofmap(unsigned int i) const
  {
    return 0;
  }

  /// Create a new class instance
  virtual ufc::dofmap* create() const
  {
    return new ffc_form_093e70ccb31b6928ba64954c37ae6fa88f3df017_dofmap_0();
  }

};

/// This class defines the interface for a local-to-global mapping of
/// degrees of freedom (dofs).

class ffc_form_093e70ccb31b6928ba64954c37ae6fa88f3df017_dofmap_1: public ufc::dofmap
{
private:

  unsigned int _global_dimension;
public:

  /// Constructor
  ffc_form_093e70ccb31b6928ba64954c37ae6fa88f3df017_dofmap_1() : ufc::dofmap()
  {
    _global_dimension = 0;
  }

  /// Destructor
  virtual ~ffc_form_093e70ccb31b6928ba64954c37ae6fa88f3df017_dofmap_1()
  {
    // Do nothing
  }

  /// Return a string identifying the dofmap
  virtual const char* signature() const
  {
    return "FFC dofmap for MixedElement(*[FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None)], **{'value_shape': (2,) })";
  }

  /// Return true iff mesh entities of topological dimension d are needed
  virtual bool needs_mesh_entities(unsigned int d) const
  {
    switch (d)
    {
    case 0:
      {
        return true;
        break;
      }
    case 1:
      {
        return false;
        break;
      }
    case 2:
      {
        return false;
        break;
      }
    case 3:
      {
        return false;
        break;
      }
    }
    
    return false;
  }

  /// Initialize dofmap for mesh (return true iff init_cell() is needed)
  virtual bool init_mesh(const ufc::mesh& m)
  {
    _global_dimension = 2*m.num_entities[0];
    return false;
  }

  /// Initialize dofmap for given cell
  virtual void init_cell(const ufc::mesh& m,
                         const ufc::cell& c)
  {
    // Do nothing
  }

  /// Finish initialization of dofmap for cells
  virtual void init_cell_finalize()
  {
    // Do nothing
  }

  /// Return the topological dimension of the associated cell shape
  virtual unsigned int topological_dimension() const
  {
    return 3;
  }

  /// Return the geometric dimension of the associated cell shape
  virtual unsigned int geometric_dimension() const
  {
    return 3;
  }

  /// Return the dimension of the global finite element function space
  virtual unsigned int global_dimension() const
  {
    return _global_dimension;
  }

  /// Return the dimension of the local finite element function space for a cell
  virtual unsigned int local_dimension(const ufc::cell& c) const
  {
    return 8;
  }

  /// Return the maximum dimension of the local finite element function space
  virtual unsigned int max_local_dimension() const
  {
    return 8;
  }

  /// Return the number of dofs on each cell facet
  virtual unsigned int num_facet_dofs() const
  {
    return 6;
  }

  /// Return the number of dofs associated with each cell entity of dimension d
  virtual unsigned int num_entity_dofs(unsigned int d) const
  {
    switch (d)
    {
    case 0:
      {
        return 2;
        break;
      }
    case 1:
      {
        return 0;
        break;
      }
    case 2:
      {
        return 0;
        break;
      }
    case 3:
      {
        return 0;
        break;
      }
    }
    
    return 0;
  }

  /// Tabulate the local-to-global mapping of dofs on a cell
  virtual void tabulate_dofs(unsigned int* dofs,
                             const ufc::mesh& m,
                             const ufc::cell& c) const
  {
    unsigned int offset = 0;
    dofs[0] = offset + c.entity_indices[0][0];
    dofs[1] = offset + c.entity_indices[0][1];
    dofs[2] = offset + c.entity_indices[0][2];
    dofs[3] = offset + c.entity_indices[0][3];
    offset += m.num_entities[0];
    dofs[4] = offset + c.entity_indices[0][0];
    dofs[5] = offset + c.entity_indices[0][1];
    dofs[6] = offset + c.entity_indices[0][2];
    dofs[7] = offset + c.entity_indices[0][3];
    offset += m.num_entities[0];
  }

  /// Tabulate the local-to-local mapping from facet dofs to cell dofs
  virtual void tabulate_facet_dofs(unsigned int* dofs,
                                   unsigned int facet) const
  {
    switch (facet)
    {
    case 0:
      {
        dofs[0] = 1;
      dofs[1] = 2;
      dofs[2] = 3;
      dofs[3] = 5;
      dofs[4] = 6;
      dofs[5] = 7;
        break;
      }
    case 1:
      {
        dofs[0] = 0;
      dofs[1] = 2;
      dofs[2] = 3;
      dofs[3] = 4;
      dofs[4] = 6;
      dofs[5] = 7;
        break;
      }
    case 2:
      {
        dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 3;
      dofs[3] = 4;
      dofs[4] = 5;
      dofs[5] = 7;
        break;
      }
    case 3:
      {
        dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 2;
      dofs[3] = 4;
      dofs[4] = 5;
      dofs[5] = 6;
        break;
      }
    }
    
  }

  /// Tabulate the local-to-local mapping of dofs on entity (d, i)
  virtual void tabulate_entity_dofs(unsigned int* dofs,
                                    unsigned int d, unsigned int i) const
  {
    if (d > 3)
    {
    throw std::runtime_error("d is larger than dimension (3)");
    }
    
    switch (d)
    {
    case 0:
      {
        if (i > 3)
      {
      throw std::runtime_error("i is larger than number of entities (3)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 0;
        dofs[1] = 4;
          break;
        }
      case 1:
        {
          dofs[0] = 1;
        dofs[1] = 5;
          break;
        }
      case 2:
        {
          dofs[0] = 2;
        dofs[1] = 6;
          break;
        }
      case 3:
        {
          dofs[0] = 3;
        dofs[1] = 7;
          break;
        }
      }
      
        break;
      }
    case 1:
      {
        
        break;
      }
    case 2:
      {
        
        break;
      }
    case 3:
      {
        
        break;
      }
    }
    
  }

  /// Tabulate the coordinates of all dofs on a cell
  virtual void tabulate_coordinates(double** coordinates,
                                    const ufc::cell& c) const
  {
    const double * const * x = c.coordinates;
    
    coordinates[0][0] = x[0][0];
    coordinates[0][1] = x[0][1];
    coordinates[0][2] = x[0][2];
    coordinates[1][0] = x[1][0];
    coordinates[1][1] = x[1][1];
    coordinates[1][2] = x[1][2];
    coordinates[2][0] = x[2][0];
    coordinates[2][1] = x[2][1];
    coordinates[2][2] = x[2][2];
    coordinates[3][0] = x[3][0];
    coordinates[3][1] = x[3][1];
    coordinates[3][2] = x[3][2];
    coordinates[4][0] = x[0][0];
    coordinates[4][1] = x[0][1];
    coordinates[4][2] = x[0][2];
    coordinates[5][0] = x[1][0];
    coordinates[5][1] = x[1][1];
    coordinates[5][2] = x[1][2];
    coordinates[6][0] = x[2][0];
    coordinates[6][1] = x[2][1];
    coordinates[6][2] = x[2][2];
    coordinates[7][0] = x[3][0];
    coordinates[7][1] = x[3][1];
    coordinates[7][2] = x[3][2];
  }

  /// Return the number of sub dofmaps (for a mixed element)
  virtual unsigned int num_sub_dofmaps() const
  {
    return 2;
  }

  /// Create a new dofmap for sub dofmap i (for a mixed element)
  virtual ufc::dofmap* create_sub_dofmap(unsigned int i) const
  {
    switch (i)
    {
    case 0:
      {
        return new ffc_form_093e70ccb31b6928ba64954c37ae6fa88f3df017_dofmap_0();
        break;
      }
    case 1:
      {
        return new ffc_form_093e70ccb31b6928ba64954c37ae6fa88f3df017_dofmap_0();
        break;
      }
    }
    
    return 0;
  }

  /// Create a new class instance
  virtual ufc::dofmap* create() const
  {
    return new ffc_form_093e70ccb31b6928ba64954c37ae6fa88f3df017_dofmap_1();
  }

};

/// This class defines the interface for the tabulation of the cell
/// tensor corresponding to the local contribution to a form from
/// the integral over a cell.

class ffc_form_093e70ccb31b6928ba64954c37ae6fa88f3df017_cell_integral_0_0: public ufc::cell_integral
{
public:

  /// Constructor
  ffc_form_093e70ccb31b6928ba64954c37ae6fa88f3df017_cell_integral_0_0() : ufc::cell_integral()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ffc_form_093e70ccb31b6928ba64954c37ae6fa88f3df017_cell_integral_0_0()
  {
    // Do nothing
  }

  /// Tabulate the tensor for the contribution from a local cell
  virtual void tabulate_tensor(double* A,
                               const double * const * w,
                               const ufc::cell& c) const
  {
    // Number of operations (multiply-add pairs) for Jacobian data:      32
    // Number of operations (multiply-add pairs) for geometry tensor:    27
    // Number of operations (multiply-add pairs) for tensor contraction: 28
    // Total number of operations (multiply-add pairs):                  87
    
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = x[1][0] - x[0][0];
    const double J_01 = x[2][0] - x[0][0];
    const double J_02 = x[3][0] - x[0][0];
    const double J_10 = x[1][1] - x[0][1];
    const double J_11 = x[2][1] - x[0][1];
    const double J_12 = x[3][1] - x[0][1];
    const double J_20 = x[1][2] - x[0][2];
    const double J_21 = x[2][2] - x[0][2];
    const double J_22 = x[3][2] - x[0][2];
    
    // Compute sub determinants
    const double d_00 = J_11*J_22 - J_12*J_21;
    const double d_01 = J_12*J_20 - J_10*J_22;
    const double d_02 = J_10*J_21 - J_11*J_20;
    const double d_10 = J_02*J_21 - J_01*J_22;
    const double d_11 = J_00*J_22 - J_02*J_20;
    const double d_12 = J_01*J_20 - J_00*J_21;
    const double d_20 = J_01*J_12 - J_02*J_11;
    const double d_21 = J_02*J_10 - J_00*J_12;
    const double d_22 = J_00*J_11 - J_01*J_10;
    
    // Compute determinant of Jacobian
    double detJ = J_00*d_00 + J_10*d_10 + J_20*d_20;
    
    // Compute inverse of Jacobian
    const double K_00 = d_00 / detJ;
    const double K_01 = d_10 / detJ;
    const double K_02 = d_20 / detJ;
    const double K_10 = d_01 / detJ;
    const double K_11 = d_11 / detJ;
    const double K_12 = d_21 / detJ;
    const double K_20 = d_02 / detJ;
    const double K_21 = d_12 / detJ;
    const double K_22 = d_22 / detJ;
    
    // Set scale factor
    const double det = std::abs(detJ);
    
    // Compute geometry tensor
    const double G0_0_0 = det*(K_00*K_00 + K_01*K_01 + K_02*K_02);
    const double G0_0_1 = det*(K_00*K_10 + K_01*K_11 + K_02*K_12);
    const double G0_0_2 = det*(K_00*K_20 + K_01*K_21 + K_02*K_22);
    const double G0_1_0 = det*(K_10*K_00 + K_11*K_01 + K_12*K_02);
    const double G0_1_1 = det*(K_10*K_10 + K_11*K_11 + K_12*K_12);
    const double G0_1_2 = det*(K_10*K_20 + K_11*K_21 + K_12*K_22);
    const double G0_2_0 = det*(K_20*K_00 + K_21*K_01 + K_22*K_02);
    const double G0_2_1 = det*(K_20*K_10 + K_21*K_11 + K_22*K_12);
    const double G0_2_2 = det*(K_20*K_20 + K_21*K_21 + K_22*K_22);
    
    // Compute element tensor
    A[0] = 0.166666666666667*G0_0_0 + 0.166666666666667*G0_0_1 + 0.166666666666667*G0_0_2 + 0.166666666666667*G0_1_0 + 0.166666666666667*G0_1_1 + 0.166666666666667*G0_1_2 + 0.166666666666667*G0_2_0 + 0.166666666666667*G0_2_1 + 0.166666666666667*G0_2_2;
    A[1] = -0.166666666666667*G0_0_0 - 0.166666666666667*G0_1_0 - 0.166666666666667*G0_2_0;
    A[2] = -0.166666666666667*G0_0_1 - 0.166666666666667*G0_1_1 - 0.166666666666667*G0_2_1;
    A[3] = -0.166666666666667*G0_0_2 - 0.166666666666667*G0_1_2 - 0.166666666666667*G0_2_2;
    A[4] = 0.0;
    A[5] = 0.0;
    A[6] = 0.0;
    A[7] = 0.0;
    A[8] = -0.166666666666667*G0_0_0 - 0.166666666666667*G0_0_1 - 0.166666666666667*G0_0_2;
    A[9] = 0.166666666666667*G0_0_0;
    A[10] = 0.166666666666667*G0_0_1;
    A[11] = 0.166666666666667*G0_0_2;
    A[12] = 0.0;
    A[13] = 0.0;
    A[14] = 0.0;
    A[15] = 0.0;
    A[16] = -0.166666666666667*G0_1_0 - 0.166666666666667*G0_1_1 - 0.166666666666667*G0_1_2;
    A[17] = 0.166666666666667*G0_1_0;
    A[18] = 0.166666666666667*G0_1_1;
    A[19] = 0.166666666666667*G0_1_2;
    A[20] = 0.0;
    A[21] = 0.0;
    A[22] = 0.0;
    A[23] = 0.0;
    A[24] = -0.166666666666667*G0_2_0 - 0.166666666666667*G0_2_1 - 0.166666666666667*G0_2_2;
    A[25] = 0.166666666666667*G0_2_0;
    A[26] = 0.166666666666667*G0_2_1;
    A[27] = 0.166666666666667*G0_2_2;
    A[28] = 0.0;
    A[29] = 0.0;
    A[30] = 0.0;
    A[31] = 0.0;
    A[32] = 0.0;
    A[33] = 0.0;
    A[34] = 0.0;
    A[35] = 0.0;
    A[36] = 0.0;
    A[37] = 0.0;
    A[38] = 0.0;
    A[39] = 0.0;
    A[40] = 0.0;
    A[41] = 0.0;
    A[42] = 0.0;
    A[43] = 0.0;
    A[44] = 0.0;
    A[45] = 0.0;
    A[46] = 0.0;
    A[47] = 0.0;
    A[48] = 0.0;
    A[49] = 0.0;
    A[50] = 0.0;
    A[51] = 0.0;
    A[52] = 0.0;
    A[53] = 0.0;
    A[54] = 0.0;
    A[55] = 0.0;
    A[56] = 0.0;
    A[57] = 0.0;
    A[58] = 0.0;
    A[59] = 0.0;
    A[60] = 0.0;
    A[61] = 0.0;
    A[62] = 0.0;
    A[63] = 0.0;
  }

  /// Tabulate the tensor for the contribution from a local cell
  /// using the specified reference cell quadrature points/weights
  virtual void tabulate_tensor(double* A,
                               const double * const * w,
                               const ufc::cell& c,
                               unsigned int num_quadrature_points,
                               const double * const * quadrature_points,
                               const double* quadrature_weights) const
  {
    throw std::runtime_error("Quadrature version of tabulate_tensor not available when using the FFC tensor representation.");
  }

};

/// This class defines the interface for the tabulation of the cell
/// tensor corresponding to the local contribution to a form from
/// the integral over a cell.

class ffc_form_093e70ccb31b6928ba64954c37ae6fa88f3df017_cell_integral_0_1: public ufc::cell_integral
{
public:

  /// Constructor
  ffc_form_093e70ccb31b6928ba64954c37ae6fa88f3df017_cell_integral_0_1() : ufc::cell_integral()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ffc_form_093e70ccb31b6928ba64954c37ae6fa88f3df017_cell_integral_0_1()
  {
    // Do nothing
  }

  /// Tabulate the tensor for the contribution from a local cell
  virtual void tabulate_tensor(double* A,
                               const double * const * w,
                               const ufc::cell& c) const
  {
    // Number of operations (multiply-add pairs) for Jacobian data:      32
    // Number of operations (multiply-add pairs) for geometry tensor:    27
    // Number of operations (multiply-add pairs) for tensor contraction: 28
    // Total number of operations (multiply-add pairs):                  87
    
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = x[1][0] - x[0][0];
    const double J_01 = x[2][0] - x[0][0];
    const double J_02 = x[3][0] - x[0][0];
    const double J_10 = x[1][1] - x[0][1];
    const double J_11 = x[2][1] - x[0][1];
    const double J_12 = x[3][1] - x[0][1];
    const double J_20 = x[1][2] - x[0][2];
    const double J_21 = x[2][2] - x[0][2];
    const double J_22 = x[3][2] - x[0][2];
    
    // Compute sub determinants
    const double d_00 = J_11*J_22 - J_12*J_21;
    const double d_01 = J_12*J_20 - J_10*J_22;
    const double d_02 = J_10*J_21 - J_11*J_20;
    const double d_10 = J_02*J_21 - J_01*J_22;
    const double d_11 = J_00*J_22 - J_02*J_20;
    const double d_12 = J_01*J_20 - J_00*J_21;
    const double d_20 = J_01*J_12 - J_02*J_11;
    const double d_21 = J_02*J_10 - J_00*J_12;
    const double d_22 = J_00*J_11 - J_01*J_10;
    
    // Compute determinant of Jacobian
    double detJ = J_00*d_00 + J_10*d_10 + J_20*d_20;
    
    // Compute inverse of Jacobian
    const double K_00 = d_00 / detJ;
    const double K_01 = d_10 / detJ;
    const double K_02 = d_20 / detJ;
    const double K_10 = d_01 / detJ;
    const double K_11 = d_11 / detJ;
    const double K_12 = d_21 / detJ;
    const double K_20 = d_02 / detJ;
    const double K_21 = d_12 / detJ;
    const double K_22 = d_22 / detJ;
    
    // Set scale factor
    const double det = std::abs(detJ);
    
    // Compute geometry tensor
    const double G0_0_0 = det*(K_00*K_00 + K_01*K_01 + K_02*K_02);
    const double G0_0_1 = det*(K_00*K_10 + K_01*K_11 + K_02*K_12);
    const double G0_0_2 = det*(K_00*K_20 + K_01*K_21 + K_02*K_22);
    const double G0_1_0 = det*(K_10*K_00 + K_11*K_01 + K_12*K_02);
    const double G0_1_1 = det*(K_10*K_10 + K_11*K_11 + K_12*K_12);
    const double G0_1_2 = det*(K_10*K_20 + K_11*K_21 + K_12*K_22);
    const double G0_2_0 = det*(K_20*K_00 + K_21*K_01 + K_22*K_02);
    const double G0_2_1 = det*(K_20*K_10 + K_21*K_11 + K_22*K_12);
    const double G0_2_2 = det*(K_20*K_20 + K_21*K_21 + K_22*K_22);
    
    // Compute element tensor
    A[0] = 0.0;
    A[1] = 0.0;
    A[2] = 0.0;
    A[3] = 0.0;
    A[4] = 0.0;
    A[5] = 0.0;
    A[6] = 0.0;
    A[7] = 0.0;
    A[8] = 0.0;
    A[9] = 0.0;
    A[10] = 0.0;
    A[11] = 0.0;
    A[12] = 0.0;
    A[13] = 0.0;
    A[14] = 0.0;
    A[15] = 0.0;
    A[16] = 0.0;
    A[17] = 0.0;
    A[18] = 0.0;
    A[19] = 0.0;
    A[20] = 0.0;
    A[21] = 0.0;
    A[22] = 0.0;
    A[23] = 0.0;
    A[24] = 0.0;
    A[25] = 0.0;
    A[26] = 0.0;
    A[27] = 0.0;
    A[28] = 0.0;
    A[29] = 0.0;
    A[30] = 0.0;
    A[31] = 0.0;
    A[32] = 0.0;
    A[33] = 0.0;
    A[34] = 0.0;
    A[35] = 0.0;
    A[36] = 0.166666666666667*G0_0_0 + 0.166666666666667*G0_0_1 + 0.166666666666667*G0_0_2 + 0.166666666666667*G0_1_0 + 0.166666666666667*G0_1_1 + 0.166666666666667*G0_1_2 + 0.166666666666667*G0_2_0 + 0.166666666666667*G0_2_1 + 0.166666666666667*G0_2_2;
    A[37] = -0.166666666666667*G0_0_0 - 0.166666666666667*G0_1_0 - 0.166666666666667*G0_2_0;
    A[38] = -0.166666666666667*G0_0_1 - 0.166666666666667*G0_1_1 - 0.166666666666667*G0_2_1;
    A[39] = -0.166666666666667*G0_0_2 - 0.166666666666667*G0_1_2 - 0.166666666666667*G0_2_2;
    A[40] = 0.0;
    A[41] = 0.0;
    A[42] = 0.0;
    A[43] = 0.0;
    A[44] = -0.166666666666667*G0_0_0 - 0.166666666666667*G0_0_1 - 0.166666666666667*G0_0_2;
    A[45] = 0.166666666666667*G0_0_0;
    A[46] = 0.166666666666667*G0_0_1;
    A[47] = 0.166666666666667*G0_0_2;
    A[48] = 0.0;
    A[49] = 0.0;
    A[50] = 0.0;
    A[51] = 0.0;
    A[52] = -0.166666666666667*G0_1_0 - 0.166666666666667*G0_1_1 - 0.166666666666667*G0_1_2;
    A[53] = 0.166666666666667*G0_1_0;
    A[54] = 0.166666666666667*G0_1_1;
    A[55] = 0.166666666666667*G0_1_2;
    A[56] = 0.0;
    A[57] = 0.0;
    A[58] = 0.0;
    A[59] = 0.0;
    A[60] = -0.166666666666667*G0_2_0 - 0.166666666666667*G0_2_1 - 0.166666666666667*G0_2_2;
    A[61] = 0.166666666666667*G0_2_0;
    A[62] = 0.166666666666667*G0_2_1;
    A[63] = 0.166666666666667*G0_2_2;
  }

  /// Tabulate the tensor for the contribution from a local cell
  /// using the specified reference cell quadrature points/weights
  virtual void tabulate_tensor(double* A,
                               const double * const * w,
                               const ufc::cell& c,
                               unsigned int num_quadrature_points,
                               const double * const * quadrature_points,
                               const double* quadrature_weights) const
  {
    throw std::runtime_error("Quadrature version of tabulate_tensor not available when using the FFC tensor representation.");
  }

};

/// This class defines the interface for the tabulation of the
/// interior facet tensor corresponding to the local contribution to
/// a form from the integral over an interior facet.

class ffc_form_093e70ccb31b6928ba64954c37ae6fa88f3df017_interior_facet_integral_0_2: public ufc::interior_facet_integral
{
public:

  /// Constructor
  ffc_form_093e70ccb31b6928ba64954c37ae6fa88f3df017_interior_facet_integral_0_2() : ufc::interior_facet_integral()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ffc_form_093e70ccb31b6928ba64954c37ae6fa88f3df017_interior_facet_integral_0_2()
  {
    // Do nothing
  }

  /// Tabulate the tensor for the contribution from a local interior facet
  virtual void tabulate_tensor(double* A,
                               const double * const * w,
                               const ufc::cell& c0,
                               const ufc::cell& c1,
                               unsigned int facet0,
                               unsigned int facet1) const
  {
    // Extract vertex coordinates
    const double * const * x0 = c0.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J0_00 = x0[1][0] - x0[0][0];
    const double J0_01 = x0[2][0] - x0[0][0];
    const double J0_02 = x0[3][0] - x0[0][0];
    const double J0_10 = x0[1][1] - x0[0][1];
    const double J0_11 = x0[2][1] - x0[0][1];
    const double J0_12 = x0[3][1] - x0[0][1];
    const double J0_20 = x0[1][2] - x0[0][2];
    const double J0_21 = x0[2][2] - x0[0][2];
    const double J0_22 = x0[3][2] - x0[0][2];
    
    // Compute sub determinants
    const double d0_00 = J0_11*J0_22 - J0_12*J0_21;
    const double d0_01 = J0_12*J0_20 - J0_10*J0_22;
    const double d0_02 = J0_10*J0_21 - J0_11*J0_20;
    const double d0_10 = J0_02*J0_21 - J0_01*J0_22;
    const double d0_11 = J0_00*J0_22 - J0_02*J0_20;
    const double d0_12 = J0_01*J0_20 - J0_00*J0_21;
    const double d0_20 = J0_01*J0_12 - J0_02*J0_11;
    const double d0_21 = J0_02*J0_10 - J0_00*J0_12;
    const double d0_22 = J0_00*J0_11 - J0_01*J0_10;
    
    // Compute determinant of Jacobian
    double detJ0 = J0_00*d0_00 + J0_10*d0_10 + J0_20*d0_20;
    
    // Compute inverse of Jacobian
    const double K0_00 = d0_00 / detJ0;
    const double K0_01 = d0_10 / detJ0;
    const double K0_02 = d0_20 / detJ0;
    const double K0_10 = d0_01 / detJ0;
    const double K0_11 = d0_11 / detJ0;
    const double K0_12 = d0_21 / detJ0;
    const double K0_20 = d0_02 / detJ0;
    const double K0_21 = d0_12 / detJ0;
    const double K0_22 = d0_22 / detJ0;
    
    // Extract vertex coordinates
    const double * const * x1 = c1.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J1_00 = x1[1][0] - x1[0][0];
    const double J1_01 = x1[2][0] - x1[0][0];
    const double J1_02 = x1[3][0] - x1[0][0];
    const double J1_10 = x1[1][1] - x1[0][1];
    const double J1_11 = x1[2][1] - x1[0][1];
    const double J1_12 = x1[3][1] - x1[0][1];
    const double J1_20 = x1[1][2] - x1[0][2];
    const double J1_21 = x1[2][2] - x1[0][2];
    const double J1_22 = x1[3][2] - x1[0][2];
    
    // Compute sub determinants
    const double d1_00 = J1_11*J1_22 - J1_12*J1_21;
    const double d1_01 = J1_12*J1_20 - J1_10*J1_22;
    const double d1_02 = J1_10*J1_21 - J1_11*J1_20;
    const double d1_10 = J1_02*J1_21 - J1_01*J1_22;
    const double d1_11 = J1_00*J1_22 - J1_02*J1_20;
    const double d1_12 = J1_01*J1_20 - J1_00*J1_21;
    const double d1_20 = J1_01*J1_12 - J1_02*J1_11;
    const double d1_21 = J1_02*J1_10 - J1_00*J1_12;
    const double d1_22 = J1_00*J1_11 - J1_01*J1_10;
    
    // Compute determinant of Jacobian
    double detJ1 = J1_00*d1_00 + J1_10*d1_10 + J1_20*d1_20;
    
    // Compute inverse of Jacobian
    const double K1_00 = d1_00 / detJ1;
    const double K1_01 = d1_10 / detJ1;
    const double K1_02 = d1_20 / detJ1;
    const double K1_10 = d1_01 / detJ1;
    const double K1_11 = d1_11 / detJ1;
    const double K1_12 = d1_21 / detJ1;
    const double K1_20 = d1_02 / detJ1;
    const double K1_21 = d1_12 / detJ1;
    const double K1_22 = d1_22 / detJ1;
    
    // Get vertices on face
    static unsigned int face_vertices[4][3] = {{1, 2, 3}, {0, 2, 3}, {0, 1, 3}, {0, 1, 2}};
    const unsigned int v0 = face_vertices[facet0][0];
    const unsigned int v1 = face_vertices[facet0][1];
    const unsigned int v2 = face_vertices[facet0][2];
    
    // Compute scale factor (area of face scaled by area of reference triangle)
    const double a0 = (x0[v0][1]*x0[v1][2] + x0[v0][2]*x0[v2][1] + x0[v1][1]*x0[v2][2]) - (x0[v2][1]*x0[v1][2] + x0[v2][2]*x0[v0][1] + x0[v1][1]*x0[v0][2]);
    
    const double a1 = (x0[v0][2]*x0[v1][0] + x0[v0][0]*x0[v2][2] + x0[v1][2]*x0[v2][0]) - (x0[v2][2]*x0[v1][0] + x0[v2][0]*x0[v0][2] + x0[v1][2]*x0[v0][0]);
    
    const double a2 = (x0[v0][0]*x0[v1][1] + x0[v0][1]*x0[v2][0] + x0[v1][0]*x0[v2][1]) - (x0[v2][0]*x0[v1][1] + x0[v2][1]*x0[v0][0] + x0[v1][0]*x0[v0][1]);
    
    const double det = std::sqrt(a0*a0 + a1*a1 + a2*a2);
    
    const bool direction = a0*(x0[facet0][0] - x0[v0][0]) + a1*(x0[facet0][1] - x0[v0][1])  + a2*(x0[facet0][2] - x0[v0][2]) < 0;// Compute facet normals from the facet scale factor constants
    const double n00 = direction ? a0 / det : -a0 / det;
    const double n01 = direction ? a1 / det : -a1 / det;
    const double n02 = direction ? a2 / det : -a2 / det;// Compute facet normals from the facet scale factor constants
    
    // Cell Volume.
    
    // Compute circumradius.
    
    
    
    // Facet Area (divide by two because 'det' is scaled by area of reference triangle).
    
    // Array of quadrature weights.
    static const double W3[3] = {0.166666666666667, 0.166666666666667, 0.166666666666667};
    // Quadrature points on the UFC reference element: (0.166666666666667, 0.166666666666667), (0.166666666666667, 0.666666666666667), (0.666666666666667, 0.166666666666667)
    
    // Value of basis functions at quadrature points.
    static const double FE0_f0_C0[3][8] = \
    {{0.0, 0.666666666666667, 0.166666666666667, 0.166666666666667, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.166666666666667, 0.166666666666667, 0.666666666666667, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.166666666666667, 0.666666666666667, 0.166666666666667, 0.0, 0.0, 0.0, 0.0}};
    
    static const double FE0_f0_C0_D001[3][8] = \
    {{-1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
    {-1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
    {-1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0}};
    
    static const double FE0_f0_C0_D010[3][8] = \
    {{-1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
    
    static const double FE0_f0_C0_D100[3][8] = \
    {{-1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
    
    static const double FE0_f0_C1[3][8] = \
    {{0.0, 0.0, 0.0, 0.0, 0.0, 0.666666666666667, 0.166666666666667, 0.166666666666667},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.166666666666667, 0.166666666666667, 0.666666666666667},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.166666666666667, 0.666666666666667, 0.166666666666667}};
    
    static const double FE0_f0_C1_D001[3][8] = \
    {{0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, 1.0},
    {0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, 1.0},
    {0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, 1.0}};
    
    static const double FE0_f0_C1_D010[3][8] = \
    {{0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0}};
    
    static const double FE0_f0_C1_D100[3][8] = \
    {{0.0, 0.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0}};
    
    static const double FE0_f1_C0[3][8] = \
    {{0.666666666666667, 0.0, 0.166666666666667, 0.166666666666667, 0.0, 0.0, 0.0, 0.0},
    {0.166666666666667, 0.0, 0.166666666666667, 0.666666666666667, 0.0, 0.0, 0.0, 0.0},
    {0.166666666666667, 0.0, 0.666666666666667, 0.166666666666667, 0.0, 0.0, 0.0, 0.0}};
    
    static const double FE0_f1_C1[3][8] = \
    {{0.0, 0.0, 0.0, 0.0, 0.666666666666667, 0.0, 0.166666666666667, 0.166666666666667},
    {0.0, 0.0, 0.0, 0.0, 0.166666666666667, 0.0, 0.166666666666667, 0.666666666666667},
    {0.0, 0.0, 0.0, 0.0, 0.166666666666667, 0.0, 0.666666666666667, 0.166666666666667}};
    
    static const double FE0_f2_C0[3][8] = \
    {{0.666666666666667, 0.166666666666667, 0.0, 0.166666666666667, 0.0, 0.0, 0.0, 0.0},
    {0.166666666666667, 0.166666666666667, 0.0, 0.666666666666667, 0.0, 0.0, 0.0, 0.0},
    {0.166666666666667, 0.666666666666667, 0.0, 0.166666666666667, 0.0, 0.0, 0.0, 0.0}};
    
    static const double FE0_f2_C1[3][8] = \
    {{0.0, 0.0, 0.0, 0.0, 0.666666666666667, 0.166666666666667, 0.0, 0.166666666666667},
    {0.0, 0.0, 0.0, 0.0, 0.166666666666667, 0.166666666666667, 0.0, 0.666666666666667},
    {0.0, 0.0, 0.0, 0.0, 0.166666666666667, 0.666666666666667, 0.0, 0.166666666666667}};
    
    static const double FE0_f3_C0[3][8] = \
    {{0.666666666666667, 0.166666666666667, 0.166666666666667, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.166666666666667, 0.166666666666667, 0.666666666666667, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.166666666666667, 0.666666666666667, 0.166666666666667, 0.0, 0.0, 0.0, 0.0, 0.0}};
    
    static const double FE0_f3_C1[3][8] = \
    {{0.0, 0.0, 0.0, 0.0, 0.666666666666667, 0.166666666666667, 0.166666666666667, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.166666666666667, 0.166666666666667, 0.666666666666667, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.166666666666667, 0.666666666666667, 0.166666666666667, 0.0}};
    
    // Reset values in the element tensor.
    for (unsigned int r = 0; r < 256; r++)
    {
      A[r] = 0.0;
    }// end loop over 'r'
    
    // Compute element tensor using UFL quadrature representation
    // Optimisations: ('eliminate zeros', False), ('ignore ones', False), ('ignore zero tables', False), ('optimisation', False), ('remove zero terms', False)
    switch (facet0)
    {
    case 0:
      {
        switch (facet1)
      {
      case 0:
        {
          // Total number of operations to compute element tensor (from this point): 45312
        
        // Loop quadrature points for integral.
        // Number of operations to compute element tensor for following IP loop = 45312
        for (unsigned int ip = 0; ip < 3; ip++)
        {
          
          // Number of operations for primary indices: 15104
          for (unsigned int j = 0; j < 8; j++)
          {
            for (unsigned int k = 0; k < 8; k++)
            {
              // Number of operations to compute entry: 59
              A[j*16 + (k + 8)] += (((FE0_f0_C0[ip][j]*(-1.0))*117.451261750142)*FE0_f0_C1[ip][k] + (((((((K1_00*FE0_f0_C1_D100[ip][k] + K1_10*FE0_f0_C1_D010[ip][k] + K1_20*FE0_f0_C1_D001[ip][k]))*0.5)*n00 + (((K1_01*FE0_f0_C1_D100[ip][k] + K1_11*FE0_f0_C1_D010[ip][k] + K1_21*FE0_f0_C1_D001[ip][k]))*0.5)*n01 + (((K1_02*FE0_f0_C1_D100[ip][k] + K1_12*FE0_f0_C1_D010[ip][k] + K1_22*FE0_f0_C1_D001[ip][k]))*0.5)*n02))*(FE0_f0_C0[ip][j]*(-1.0)))*(-1.0) + ((((((K0_00*FE0_f0_C0_D100[ip][j] + K0_10*FE0_f0_C0_D010[ip][j] + K0_20*FE0_f0_C0_D001[ip][j]))*0.5)*n00 + (((K0_01*FE0_f0_C0_D100[ip][j] + K0_11*FE0_f0_C0_D010[ip][j] + K0_21*FE0_f0_C0_D001[ip][j]))*0.5)*n01 + (((K0_02*FE0_f0_C0_D100[ip][j] + K0_12*FE0_f0_C0_D010[ip][j] + K0_22*FE0_f0_C0_D001[ip][j]))*0.5)*n02))*(-1.0))*FE0_f0_C1[ip][k]))*W3[ip]*det;
              // Number of operations to compute entry: 59
              A[(j + 8)*16 + k] += (FE0_f0_C1[ip][j]*117.451261750142*(FE0_f0_C0[ip][k]*(-1.0)) + (((((((K1_02*FE0_f0_C1_D100[ip][j] + K1_12*FE0_f0_C1_D010[ip][j] + K1_22*FE0_f0_C1_D001[ip][j]))*0.5)*n02 + (((K1_01*FE0_f0_C1_D100[ip][j] + K1_11*FE0_f0_C1_D010[ip][j] + K1_21*FE0_f0_C1_D001[ip][j]))*0.5)*n01 + (((K1_00*FE0_f0_C1_D100[ip][j] + K1_10*FE0_f0_C1_D010[ip][j] + K1_20*FE0_f0_C1_D001[ip][j]))*0.5)*n00))*(-1.0))*(FE0_f0_C0[ip][k]*(-1.0)) + ((((((K0_00*FE0_f0_C0_D100[ip][k] + K0_10*FE0_f0_C0_D010[ip][k] + K0_20*FE0_f0_C0_D001[ip][k]))*0.5)*n00 + (((K0_02*FE0_f0_C0_D100[ip][k] + K0_12*FE0_f0_C0_D010[ip][k] + K0_22*FE0_f0_C0_D001[ip][k]))*0.5)*n02 + (((K0_01*FE0_f0_C0_D100[ip][k] + K0_11*FE0_f0_C0_D010[ip][k] + K0_21*FE0_f0_C0_D001[ip][k]))*0.5)*n01))*FE0_f0_C1[ip][j])*(-1.0)))*W3[ip]*det;
              // Number of operations to compute entry: 61
              A[j*16 + k] += (((FE0_f0_C0[ip][j]*(-1.0))*117.451261750142)*(FE0_f0_C0[ip][k]*(-1.0)) + (((((((K0_00*FE0_f0_C0_D100[ip][k] + K0_10*FE0_f0_C0_D010[ip][k] + K0_20*FE0_f0_C0_D001[ip][k]))*0.5)*n00 + (((K0_02*FE0_f0_C0_D100[ip][k] + K0_12*FE0_f0_C0_D010[ip][k] + K0_22*FE0_f0_C0_D001[ip][k]))*0.5)*n02 + (((K0_01*FE0_f0_C0_D100[ip][k] + K0_11*FE0_f0_C0_D010[ip][k] + K0_21*FE0_f0_C0_D001[ip][k]))*0.5)*n01))*(FE0_f0_C0[ip][j]*(-1.0)))*(-1.0) + ((((((K0_00*FE0_f0_C0_D100[ip][j] + K0_10*FE0_f0_C0_D010[ip][j] + K0_20*FE0_f0_C0_D001[ip][j]))*0.5)*n00 + (((K0_01*FE0_f0_C0_D100[ip][j] + K0_11*FE0_f0_C0_D010[ip][j] + K0_21*FE0_f0_C0_D001[ip][j]))*0.5)*n01 + (((K0_02*FE0_f0_C0_D100[ip][j] + K0_12*FE0_f0_C0_D010[ip][j] + K0_22*FE0_f0_C0_D001[ip][j]))*0.5)*n02))*(-1.0))*(FE0_f0_C0[ip][k]*(-1.0))))*W3[ip]*det;
              // Number of operations to compute entry: 57
              A[(j + 8)*16 + (k + 8)] += (FE0_f0_C1[ip][j]*117.451261750142*FE0_f0_C1[ip][k] + (((((((K1_02*FE0_f0_C1_D100[ip][j] + K1_12*FE0_f0_C1_D010[ip][j] + K1_22*FE0_f0_C1_D001[ip][j]))*0.5)*n02 + (((K1_01*FE0_f0_C1_D100[ip][j] + K1_11*FE0_f0_C1_D010[ip][j] + K1_21*FE0_f0_C1_D001[ip][j]))*0.5)*n01 + (((K1_00*FE0_f0_C1_D100[ip][j] + K1_10*FE0_f0_C1_D010[ip][j] + K1_20*FE0_f0_C1_D001[ip][j]))*0.5)*n00))*(-1.0))*FE0_f0_C1[ip][k] + ((((((K1_00*FE0_f0_C1_D100[ip][k] + K1_10*FE0_f0_C1_D010[ip][k] + K1_20*FE0_f0_C1_D001[ip][k]))*0.5)*n00 + (((K1_01*FE0_f0_C1_D100[ip][k] + K1_11*FE0_f0_C1_D010[ip][k] + K1_21*FE0_f0_C1_D001[ip][k]))*0.5)*n01 + (((K1_02*FE0_f0_C1_D100[ip][k] + K1_12*FE0_f0_C1_D010[ip][k] + K1_22*FE0_f0_C1_D001[ip][k]))*0.5)*n02))*FE0_f0_C1[ip][j])*(-1.0)))*W3[ip]*det;
            }// end loop over 'k'
          }// end loop over 'j'
        }// end loop over 'ip'
          break;
        }
      case 1:
        {
          // Total number of operations to compute element tensor (from this point): 45312
        
        // Loop quadrature points for integral.
        // Number of operations to compute element tensor for following IP loop = 45312
        for (unsigned int ip = 0; ip < 3; ip++)
        {
          
          // Number of operations for primary indices: 15104
          for (unsigned int j = 0; j < 8; j++)
          {
            for (unsigned int k = 0; k < 8; k++)
            {
              // Number of operations to compute entry: 59
              A[j*16 + (k + 8)] += (((FE0_f0_C0[ip][j]*(-1.0))*117.451261750142)*FE0_f1_C1[ip][k] + (((((((K1_00*FE0_f0_C1_D100[ip][k] + K1_10*FE0_f0_C1_D010[ip][k] + K1_20*FE0_f0_C1_D001[ip][k]))*0.5)*n00 + (((K1_01*FE0_f0_C1_D100[ip][k] + K1_11*FE0_f0_C1_D010[ip][k] + K1_21*FE0_f0_C1_D001[ip][k]))*0.5)*n01 + (((K1_02*FE0_f0_C1_D100[ip][k] + K1_12*FE0_f0_C1_D010[ip][k] + K1_22*FE0_f0_C1_D001[ip][k]))*0.5)*n02))*(FE0_f0_C0[ip][j]*(-1.0)))*(-1.0) + ((((((K0_00*FE0_f0_C0_D100[ip][j] + K0_10*FE0_f0_C0_D010[ip][j] + K0_20*FE0_f0_C0_D001[ip][j]))*0.5)*n00 + (((K0_01*FE0_f0_C0_D100[ip][j] + K0_11*FE0_f0_C0_D010[ip][j] + K0_21*FE0_f0_C0_D001[ip][j]))*0.5)*n01 + (((K0_02*FE0_f0_C0_D100[ip][j] + K0_12*FE0_f0_C0_D010[ip][j] + K0_22*FE0_f0_C0_D001[ip][j]))*0.5)*n02))*(-1.0))*FE0_f1_C1[ip][k]))*W3[ip]*det;
              // Number of operations to compute entry: 59
              A[(j + 8)*16 + k] += ((((((((K1_02*FE0_f0_C1_D100[ip][j] + K1_12*FE0_f0_C1_D010[ip][j] + K1_22*FE0_f0_C1_D001[ip][j]))*0.5)*n02 + (((K1_01*FE0_f0_C1_D100[ip][j] + K1_11*FE0_f0_C1_D010[ip][j] + K1_21*FE0_f0_C1_D001[ip][j]))*0.5)*n01 + (((K1_00*FE0_f0_C1_D100[ip][j] + K1_10*FE0_f0_C1_D010[ip][j] + K1_20*FE0_f0_C1_D001[ip][j]))*0.5)*n00))*(-1.0))*(FE0_f0_C0[ip][k]*(-1.0)) + ((((((K0_00*FE0_f0_C0_D100[ip][k] + K0_10*FE0_f0_C0_D010[ip][k] + K0_20*FE0_f0_C0_D001[ip][k]))*0.5)*n00 + (((K0_02*FE0_f0_C0_D100[ip][k] + K0_12*FE0_f0_C0_D010[ip][k] + K0_22*FE0_f0_C0_D001[ip][k]))*0.5)*n02 + (((K0_01*FE0_f0_C0_D100[ip][k] + K0_11*FE0_f0_C0_D010[ip][k] + K0_21*FE0_f0_C0_D001[ip][k]))*0.5)*n01))*FE0_f1_C1[ip][j])*(-1.0)) + FE0_f1_C1[ip][j]*117.451261750142*(FE0_f0_C0[ip][k]*(-1.0)))*W3[ip]*det;
              // Number of operations to compute entry: 61
              A[j*16 + k] += (((FE0_f0_C0[ip][j]*(-1.0))*117.451261750142)*(FE0_f0_C0[ip][k]*(-1.0)) + (((((((K0_00*FE0_f0_C0_D100[ip][k] + K0_10*FE0_f0_C0_D010[ip][k] + K0_20*FE0_f0_C0_D001[ip][k]))*0.5)*n00 + (((K0_02*FE0_f0_C0_D100[ip][k] + K0_12*FE0_f0_C0_D010[ip][k] + K0_22*FE0_f0_C0_D001[ip][k]))*0.5)*n02 + (((K0_01*FE0_f0_C0_D100[ip][k] + K0_11*FE0_f0_C0_D010[ip][k] + K0_21*FE0_f0_C0_D001[ip][k]))*0.5)*n01))*(FE0_f0_C0[ip][j]*(-1.0)))*(-1.0) + ((((((K0_00*FE0_f0_C0_D100[ip][j] + K0_10*FE0_f0_C0_D010[ip][j] + K0_20*FE0_f0_C0_D001[ip][j]))*0.5)*n00 + (((K0_01*FE0_f0_C0_D100[ip][j] + K0_11*FE0_f0_C0_D010[ip][j] + K0_21*FE0_f0_C0_D001[ip][j]))*0.5)*n01 + (((K0_02*FE0_f0_C0_D100[ip][j] + K0_12*FE0_f0_C0_D010[ip][j] + K0_22*FE0_f0_C0_D001[ip][j]))*0.5)*n02))*(-1.0))*(FE0_f0_C0[ip][k]*(-1.0))))*W3[ip]*det;
              // Number of operations to compute entry: 57
              A[(j + 8)*16 + (k + 8)] += (FE0_f1_C1[ip][j]*117.451261750142*FE0_f1_C1[ip][k] + (((((((K1_00*FE0_f0_C1_D100[ip][k] + K1_10*FE0_f0_C1_D010[ip][k] + K1_20*FE0_f0_C1_D001[ip][k]))*0.5)*n00 + (((K1_01*FE0_f0_C1_D100[ip][k] + K1_11*FE0_f0_C1_D010[ip][k] + K1_21*FE0_f0_C1_D001[ip][k]))*0.5)*n01 + (((K1_02*FE0_f0_C1_D100[ip][k] + K1_12*FE0_f0_C1_D010[ip][k] + K1_22*FE0_f0_C1_D001[ip][k]))*0.5)*n02))*FE0_f1_C1[ip][j])*(-1.0) + ((((((K1_02*FE0_f0_C1_D100[ip][j] + K1_12*FE0_f0_C1_D010[ip][j] + K1_22*FE0_f0_C1_D001[ip][j]))*0.5)*n02 + (((K1_01*FE0_f0_C1_D100[ip][j] + K1_11*FE0_f0_C1_D010[ip][j] + K1_21*FE0_f0_C1_D001[ip][j]))*0.5)*n01 + (((K1_00*FE0_f0_C1_D100[ip][j] + K1_10*FE0_f0_C1_D010[ip][j] + K1_20*FE0_f0_C1_D001[ip][j]))*0.5)*n00))*(-1.0))*FE0_f1_C1[ip][k]))*W3[ip]*det;
            }// end loop over 'k'
          }// end loop over 'j'
        }// end loop over 'ip'
          break;
        }
      case 2:
        {
          // Total number of operations to compute element tensor (from this point): 45312
        
        // Loop quadrature points for integral.
        // Number of operations to compute element tensor for following IP loop = 45312
        for (unsigned int ip = 0; ip < 3; ip++)
        {
          
          // Number of operations for primary indices: 15104
          for (unsigned int j = 0; j < 8; j++)
          {
            for (unsigned int k = 0; k < 8; k++)
            {
              // Number of operations to compute entry: 59
              A[j*16 + (k + 8)] += (((FE0_f0_C0[ip][j]*(-1.0))*117.451261750142)*FE0_f2_C1[ip][k] + (((((((K0_00*FE0_f0_C0_D100[ip][j] + K0_10*FE0_f0_C0_D010[ip][j] + K0_20*FE0_f0_C0_D001[ip][j]))*0.5)*n00 + (((K0_01*FE0_f0_C0_D100[ip][j] + K0_11*FE0_f0_C0_D010[ip][j] + K0_21*FE0_f0_C0_D001[ip][j]))*0.5)*n01 + (((K0_02*FE0_f0_C0_D100[ip][j] + K0_12*FE0_f0_C0_D010[ip][j] + K0_22*FE0_f0_C0_D001[ip][j]))*0.5)*n02))*(-1.0))*FE0_f2_C1[ip][k] + ((((((K1_00*FE0_f0_C1_D100[ip][k] + K1_10*FE0_f0_C1_D010[ip][k] + K1_20*FE0_f0_C1_D001[ip][k]))*0.5)*n00 + (((K1_01*FE0_f0_C1_D100[ip][k] + K1_11*FE0_f0_C1_D010[ip][k] + K1_21*FE0_f0_C1_D001[ip][k]))*0.5)*n01 + (((K1_02*FE0_f0_C1_D100[ip][k] + K1_12*FE0_f0_C1_D010[ip][k] + K1_22*FE0_f0_C1_D001[ip][k]))*0.5)*n02))*(FE0_f0_C0[ip][j]*(-1.0)))*(-1.0)))*W3[ip]*det;
              // Number of operations to compute entry: 59
              A[(j + 8)*16 + k] += ((((((((K0_00*FE0_f0_C0_D100[ip][k] + K0_10*FE0_f0_C0_D010[ip][k] + K0_20*FE0_f0_C0_D001[ip][k]))*0.5)*n00 + (((K0_02*FE0_f0_C0_D100[ip][k] + K0_12*FE0_f0_C0_D010[ip][k] + K0_22*FE0_f0_C0_D001[ip][k]))*0.5)*n02 + (((K0_01*FE0_f0_C0_D100[ip][k] + K0_11*FE0_f0_C0_D010[ip][k] + K0_21*FE0_f0_C0_D001[ip][k]))*0.5)*n01))*FE0_f2_C1[ip][j])*(-1.0) + ((((((K1_02*FE0_f0_C1_D100[ip][j] + K1_12*FE0_f0_C1_D010[ip][j] + K1_22*FE0_f0_C1_D001[ip][j]))*0.5)*n02 + (((K1_01*FE0_f0_C1_D100[ip][j] + K1_11*FE0_f0_C1_D010[ip][j] + K1_21*FE0_f0_C1_D001[ip][j]))*0.5)*n01 + (((K1_00*FE0_f0_C1_D100[ip][j] + K1_10*FE0_f0_C1_D010[ip][j] + K1_20*FE0_f0_C1_D001[ip][j]))*0.5)*n00))*(-1.0))*(FE0_f0_C0[ip][k]*(-1.0))) + FE0_f2_C1[ip][j]*117.451261750142*(FE0_f0_C0[ip][k]*(-1.0)))*W3[ip]*det;
              // Number of operations to compute entry: 61
              A[j*16 + k] += (((FE0_f0_C0[ip][j]*(-1.0))*117.451261750142)*(FE0_f0_C0[ip][k]*(-1.0)) + (((((((K0_00*FE0_f0_C0_D100[ip][k] + K0_10*FE0_f0_C0_D010[ip][k] + K0_20*FE0_f0_C0_D001[ip][k]))*0.5)*n00 + (((K0_02*FE0_f0_C0_D100[ip][k] + K0_12*FE0_f0_C0_D010[ip][k] + K0_22*FE0_f0_C0_D001[ip][k]))*0.5)*n02 + (((K0_01*FE0_f0_C0_D100[ip][k] + K0_11*FE0_f0_C0_D010[ip][k] + K0_21*FE0_f0_C0_D001[ip][k]))*0.5)*n01))*(FE0_f0_C0[ip][j]*(-1.0)))*(-1.0) + ((((((K0_00*FE0_f0_C0_D100[ip][j] + K0_10*FE0_f0_C0_D010[ip][j] + K0_20*FE0_f0_C0_D001[ip][j]))*0.5)*n00 + (((K0_01*FE0_f0_C0_D100[ip][j] + K0_11*FE0_f0_C0_D010[ip][j] + K0_21*FE0_f0_C0_D001[ip][j]))*0.5)*n01 + (((K0_02*FE0_f0_C0_D100[ip][j] + K0_12*FE0_f0_C0_D010[ip][j] + K0_22*FE0_f0_C0_D001[ip][j]))*0.5)*n02))*(-1.0))*(FE0_f0_C0[ip][k]*(-1.0))))*W3[ip]*det;
              // Number of operations to compute entry: 57
              A[(j + 8)*16 + (k + 8)] += (FE0_f2_C1[ip][j]*117.451261750142*FE0_f2_C1[ip][k] + (((((((K1_02*FE0_f0_C1_D100[ip][j] + K1_12*FE0_f0_C1_D010[ip][j] + K1_22*FE0_f0_C1_D001[ip][j]))*0.5)*n02 + (((K1_01*FE0_f0_C1_D100[ip][j] + K1_11*FE0_f0_C1_D010[ip][j] + K1_21*FE0_f0_C1_D001[ip][j]))*0.5)*n01 + (((K1_00*FE0_f0_C1_D100[ip][j] + K1_10*FE0_f0_C1_D010[ip][j] + K1_20*FE0_f0_C1_D001[ip][j]))*0.5)*n00))*(-1.0))*FE0_f2_C1[ip][k] + ((((((K1_00*FE0_f0_C1_D100[ip][k] + K1_10*FE0_f0_C1_D010[ip][k] + K1_20*FE0_f0_C1_D001[ip][k]))*0.5)*n00 + (((K1_01*FE0_f0_C1_D100[ip][k] + K1_11*FE0_f0_C1_D010[ip][k] + K1_21*FE0_f0_C1_D001[ip][k]))*0.5)*n01 + (((K1_02*FE0_f0_C1_D100[ip][k] + K1_12*FE0_f0_C1_D010[ip][k] + K1_22*FE0_f0_C1_D001[ip][k]))*0.5)*n02))*FE0_f2_C1[ip][j])*(-1.0)))*W3[ip]*det;
            }// end loop over 'k'
          }// end loop over 'j'
        }// end loop over 'ip'
          break;
        }
      case 3:
        {
          // Total number of operations to compute element tensor (from this point): 45312
        
        // Loop quadrature points for integral.
        // Number of operations to compute element tensor for following IP loop = 45312
        for (unsigned int ip = 0; ip < 3; ip++)
        {
          
          // Number of operations for primary indices: 15104
          for (unsigned int j = 0; j < 8; j++)
          {
            for (unsigned int k = 0; k < 8; k++)
            {
              // Number of operations to compute entry: 59
              A[j*16 + (k + 8)] += ((((((((K1_00*FE0_f0_C1_D100[ip][k] + K1_10*FE0_f0_C1_D010[ip][k] + K1_20*FE0_f0_C1_D001[ip][k]))*0.5)*n00 + (((K1_01*FE0_f0_C1_D100[ip][k] + K1_11*FE0_f0_C1_D010[ip][k] + K1_21*FE0_f0_C1_D001[ip][k]))*0.5)*n01 + (((K1_02*FE0_f0_C1_D100[ip][k] + K1_12*FE0_f0_C1_D010[ip][k] + K1_22*FE0_f0_C1_D001[ip][k]))*0.5)*n02))*(FE0_f0_C0[ip][j]*(-1.0)))*(-1.0) + ((((((K0_00*FE0_f0_C0_D100[ip][j] + K0_10*FE0_f0_C0_D010[ip][j] + K0_20*FE0_f0_C0_D001[ip][j]))*0.5)*n00 + (((K0_01*FE0_f0_C0_D100[ip][j] + K0_11*FE0_f0_C0_D010[ip][j] + K0_21*FE0_f0_C0_D001[ip][j]))*0.5)*n01 + (((K0_02*FE0_f0_C0_D100[ip][j] + K0_12*FE0_f0_C0_D010[ip][j] + K0_22*FE0_f0_C0_D001[ip][j]))*0.5)*n02))*(-1.0))*FE0_f3_C1[ip][k]) + ((FE0_f0_C0[ip][j]*(-1.0))*117.451261750142)*FE0_f3_C1[ip][k])*W3[ip]*det;
              // Number of operations to compute entry: 59
              A[(j + 8)*16 + k] += ((((((((K1_02*FE0_f0_C1_D100[ip][j] + K1_12*FE0_f0_C1_D010[ip][j] + K1_22*FE0_f0_C1_D001[ip][j]))*0.5)*n02 + (((K1_01*FE0_f0_C1_D100[ip][j] + K1_11*FE0_f0_C1_D010[ip][j] + K1_21*FE0_f0_C1_D001[ip][j]))*0.5)*n01 + (((K1_00*FE0_f0_C1_D100[ip][j] + K1_10*FE0_f0_C1_D010[ip][j] + K1_20*FE0_f0_C1_D001[ip][j]))*0.5)*n00))*(-1.0))*(FE0_f0_C0[ip][k]*(-1.0)) + ((((((K0_00*FE0_f0_C0_D100[ip][k] + K0_10*FE0_f0_C0_D010[ip][k] + K0_20*FE0_f0_C0_D001[ip][k]))*0.5)*n00 + (((K0_02*FE0_f0_C0_D100[ip][k] + K0_12*FE0_f0_C0_D010[ip][k] + K0_22*FE0_f0_C0_D001[ip][k]))*0.5)*n02 + (((K0_01*FE0_f0_C0_D100[ip][k] + K0_11*FE0_f0_C0_D010[ip][k] + K0_21*FE0_f0_C0_D001[ip][k]))*0.5)*n01))*FE0_f3_C1[ip][j])*(-1.0)) + FE0_f3_C1[ip][j]*117.451261750142*(FE0_f0_C0[ip][k]*(-1.0)))*W3[ip]*det;
              // Number of operations to compute entry: 61
              A[j*16 + k] += (((FE0_f0_C0[ip][j]*(-1.0))*117.451261750142)*(FE0_f0_C0[ip][k]*(-1.0)) + (((((((K0_00*FE0_f0_C0_D100[ip][k] + K0_10*FE0_f0_C0_D010[ip][k] + K0_20*FE0_f0_C0_D001[ip][k]))*0.5)*n00 + (((K0_02*FE0_f0_C0_D100[ip][k] + K0_12*FE0_f0_C0_D010[ip][k] + K0_22*FE0_f0_C0_D001[ip][k]))*0.5)*n02 + (((K0_01*FE0_f0_C0_D100[ip][k] + K0_11*FE0_f0_C0_D010[ip][k] + K0_21*FE0_f0_C0_D001[ip][k]))*0.5)*n01))*(FE0_f0_C0[ip][j]*(-1.0)))*(-1.0) + ((((((K0_00*FE0_f0_C0_D100[ip][j] + K0_10*FE0_f0_C0_D010[ip][j] + K0_20*FE0_f0_C0_D001[ip][j]))*0.5)*n00 + (((K0_01*FE0_f0_C0_D100[ip][j] + K0_11*FE0_f0_C0_D010[ip][j] + K0_21*FE0_f0_C0_D001[ip][j]))*0.5)*n01 + (((K0_02*FE0_f0_C0_D100[ip][j] + K0_12*FE0_f0_C0_D010[ip][j] + K0_22*FE0_f0_C0_D001[ip][j]))*0.5)*n02))*(-1.0))*(FE0_f0_C0[ip][k]*(-1.0))))*W3[ip]*det;
              // Number of operations to compute entry: 57
              A[(j + 8)*16 + (k + 8)] += (FE0_f3_C1[ip][j]*117.451261750142*FE0_f3_C1[ip][k] + (((((((K1_02*FE0_f0_C1_D100[ip][j] + K1_12*FE0_f0_C1_D010[ip][j] + K1_22*FE0_f0_C1_D001[ip][j]))*0.5)*n02 + (((K1_01*FE0_f0_C1_D100[ip][j] + K1_11*FE0_f0_C1_D010[ip][j] + K1_21*FE0_f0_C1_D001[ip][j]))*0.5)*n01 + (((K1_00*FE0_f0_C1_D100[ip][j] + K1_10*FE0_f0_C1_D010[ip][j] + K1_20*FE0_f0_C1_D001[ip][j]))*0.5)*n00))*(-1.0))*FE0_f3_C1[ip][k] + ((((((K1_00*FE0_f0_C1_D100[ip][k] + K1_10*FE0_f0_C1_D010[ip][k] + K1_20*FE0_f0_C1_D001[ip][k]))*0.5)*n00 + (((K1_01*FE0_f0_C1_D100[ip][k] + K1_11*FE0_f0_C1_D010[ip][k] + K1_21*FE0_f0_C1_D001[ip][k]))*0.5)*n01 + (((K1_02*FE0_f0_C1_D100[ip][k] + K1_12*FE0_f0_C1_D010[ip][k] + K1_22*FE0_f0_C1_D001[ip][k]))*0.5)*n02))*FE0_f3_C1[ip][j])*(-1.0)))*W3[ip]*det;
            }// end loop over 'k'
          }// end loop over 'j'
        }// end loop over 'ip'
          break;
        }
      }
      
        break;
      }
    case 1:
      {
        switch (facet1)
      {
      case 0:
        {
          // Total number of operations to compute element tensor (from this point): 45312
        
        // Loop quadrature points for integral.
        // Number of operations to compute element tensor for following IP loop = 45312
        for (unsigned int ip = 0; ip < 3; ip++)
        {
          
          // Number of operations for primary indices: 15104
          for (unsigned int j = 0; j < 8; j++)
          {
            for (unsigned int k = 0; k < 8; k++)
            {
              // Number of operations to compute entry: 59
              A[j*16 + (k + 8)] += (((FE0_f1_C0[ip][j]*(-1.0))*117.451261750142)*FE0_f0_C1[ip][k] + (((((((K0_00*FE0_f0_C0_D100[ip][j] + K0_10*FE0_f0_C0_D010[ip][j] + K0_20*FE0_f0_C0_D001[ip][j]))*0.5)*n00 + (((K0_01*FE0_f0_C0_D100[ip][j] + K0_11*FE0_f0_C0_D010[ip][j] + K0_21*FE0_f0_C0_D001[ip][j]))*0.5)*n01 + (((K0_02*FE0_f0_C0_D100[ip][j] + K0_12*FE0_f0_C0_D010[ip][j] + K0_22*FE0_f0_C0_D001[ip][j]))*0.5)*n02))*(-1.0))*FE0_f0_C1[ip][k] + ((((((K1_00*FE0_f0_C1_D100[ip][k] + K1_10*FE0_f0_C1_D010[ip][k] + K1_20*FE0_f0_C1_D001[ip][k]))*0.5)*n00 + (((K1_01*FE0_f0_C1_D100[ip][k] + K1_11*FE0_f0_C1_D010[ip][k] + K1_21*FE0_f0_C1_D001[ip][k]))*0.5)*n01 + (((K1_02*FE0_f0_C1_D100[ip][k] + K1_12*FE0_f0_C1_D010[ip][k] + K1_22*FE0_f0_C1_D001[ip][k]))*0.5)*n02))*(FE0_f1_C0[ip][j]*(-1.0)))*(-1.0)))*W3[ip]*det;
              // Number of operations to compute entry: 59
              A[(j + 8)*16 + k] += ((((((((K1_02*FE0_f0_C1_D100[ip][j] + K1_12*FE0_f0_C1_D010[ip][j] + K1_22*FE0_f0_C1_D001[ip][j]))*0.5)*n02 + (((K1_01*FE0_f0_C1_D100[ip][j] + K1_11*FE0_f0_C1_D010[ip][j] + K1_21*FE0_f0_C1_D001[ip][j]))*0.5)*n01 + (((K1_00*FE0_f0_C1_D100[ip][j] + K1_10*FE0_f0_C1_D010[ip][j] + K1_20*FE0_f0_C1_D001[ip][j]))*0.5)*n00))*(-1.0))*(FE0_f1_C0[ip][k]*(-1.0)) + ((((((K0_00*FE0_f0_C0_D100[ip][k] + K0_10*FE0_f0_C0_D010[ip][k] + K0_20*FE0_f0_C0_D001[ip][k]))*0.5)*n00 + (((K0_02*FE0_f0_C0_D100[ip][k] + K0_12*FE0_f0_C0_D010[ip][k] + K0_22*FE0_f0_C0_D001[ip][k]))*0.5)*n02 + (((K0_01*FE0_f0_C0_D100[ip][k] + K0_11*FE0_f0_C0_D010[ip][k] + K0_21*FE0_f0_C0_D001[ip][k]))*0.5)*n01))*FE0_f0_C1[ip][j])*(-1.0)) + FE0_f0_C1[ip][j]*117.451261750142*(FE0_f1_C0[ip][k]*(-1.0)))*W3[ip]*det;
              // Number of operations to compute entry: 61
              A[j*16 + k] += ((((((((K0_00*FE0_f0_C0_D100[ip][k] + K0_10*FE0_f0_C0_D010[ip][k] + K0_20*FE0_f0_C0_D001[ip][k]))*0.5)*n00 + (((K0_02*FE0_f0_C0_D100[ip][k] + K0_12*FE0_f0_C0_D010[ip][k] + K0_22*FE0_f0_C0_D001[ip][k]))*0.5)*n02 + (((K0_01*FE0_f0_C0_D100[ip][k] + K0_11*FE0_f0_C0_D010[ip][k] + K0_21*FE0_f0_C0_D001[ip][k]))*0.5)*n01))*(FE0_f1_C0[ip][j]*(-1.0)))*(-1.0) + ((((((K0_00*FE0_f0_C0_D100[ip][j] + K0_10*FE0_f0_C0_D010[ip][j] + K0_20*FE0_f0_C0_D001[ip][j]))*0.5)*n00 + (((K0_01*FE0_f0_C0_D100[ip][j] + K0_11*FE0_f0_C0_D010[ip][j] + K0_21*FE0_f0_C0_D001[ip][j]))*0.5)*n01 + (((K0_02*FE0_f0_C0_D100[ip][j] + K0_12*FE0_f0_C0_D010[ip][j] + K0_22*FE0_f0_C0_D001[ip][j]))*0.5)*n02))*(-1.0))*(FE0_f1_C0[ip][k]*(-1.0))) + ((FE0_f1_C0[ip][j]*(-1.0))*117.451261750142)*(FE0_f1_C0[ip][k]*(-1.0)))*W3[ip]*det;
              // Number of operations to compute entry: 57
              A[(j + 8)*16 + (k + 8)] += (FE0_f0_C1[ip][j]*117.451261750142*FE0_f0_C1[ip][k] + (((((((K1_02*FE0_f0_C1_D100[ip][j] + K1_12*FE0_f0_C1_D010[ip][j] + K1_22*FE0_f0_C1_D001[ip][j]))*0.5)*n02 + (((K1_01*FE0_f0_C1_D100[ip][j] + K1_11*FE0_f0_C1_D010[ip][j] + K1_21*FE0_f0_C1_D001[ip][j]))*0.5)*n01 + (((K1_00*FE0_f0_C1_D100[ip][j] + K1_10*FE0_f0_C1_D010[ip][j] + K1_20*FE0_f0_C1_D001[ip][j]))*0.5)*n00))*(-1.0))*FE0_f0_C1[ip][k] + ((((((K1_00*FE0_f0_C1_D100[ip][k] + K1_10*FE0_f0_C1_D010[ip][k] + K1_20*FE0_f0_C1_D001[ip][k]))*0.5)*n00 + (((K1_01*FE0_f0_C1_D100[ip][k] + K1_11*FE0_f0_C1_D010[ip][k] + K1_21*FE0_f0_C1_D001[ip][k]))*0.5)*n01 + (((K1_02*FE0_f0_C1_D100[ip][k] + K1_12*FE0_f0_C1_D010[ip][k] + K1_22*FE0_f0_C1_D001[ip][k]))*0.5)*n02))*FE0_f0_C1[ip][j])*(-1.0)))*W3[ip]*det;
            }// end loop over 'k'
          }// end loop over 'j'
        }// end loop over 'ip'
          break;
        }
      case 1:
        {
          // Total number of operations to compute element tensor (from this point): 45312
        
        // Loop quadrature points for integral.
        // Number of operations to compute element tensor for following IP loop = 45312
        for (unsigned int ip = 0; ip < 3; ip++)
        {
          
          // Number of operations for primary indices: 15104
          for (unsigned int j = 0; j < 8; j++)
          {
            for (unsigned int k = 0; k < 8; k++)
            {
              // Number of operations to compute entry: 59
              A[j*16 + (k + 8)] += ((((((((K0_00*FE0_f0_C0_D100[ip][j] + K0_10*FE0_f0_C0_D010[ip][j] + K0_20*FE0_f0_C0_D001[ip][j]))*0.5)*n00 + (((K0_01*FE0_f0_C0_D100[ip][j] + K0_11*FE0_f0_C0_D010[ip][j] + K0_21*FE0_f0_C0_D001[ip][j]))*0.5)*n01 + (((K0_02*FE0_f0_C0_D100[ip][j] + K0_12*FE0_f0_C0_D010[ip][j] + K0_22*FE0_f0_C0_D001[ip][j]))*0.5)*n02))*(-1.0))*FE0_f1_C1[ip][k] + ((((((K1_00*FE0_f0_C1_D100[ip][k] + K1_10*FE0_f0_C1_D010[ip][k] + K1_20*FE0_f0_C1_D001[ip][k]))*0.5)*n00 + (((K1_01*FE0_f0_C1_D100[ip][k] + K1_11*FE0_f0_C1_D010[ip][k] + K1_21*FE0_f0_C1_D001[ip][k]))*0.5)*n01 + (((K1_02*FE0_f0_C1_D100[ip][k] + K1_12*FE0_f0_C1_D010[ip][k] + K1_22*FE0_f0_C1_D001[ip][k]))*0.5)*n02))*(FE0_f1_C0[ip][j]*(-1.0)))*(-1.0)) + ((FE0_f1_C0[ip][j]*(-1.0))*117.451261750142)*FE0_f1_C1[ip][k])*W3[ip]*det;
              // Number of operations to compute entry: 59
              A[(j + 8)*16 + k] += (FE0_f1_C1[ip][j]*117.451261750142*(FE0_f1_C0[ip][k]*(-1.0)) + (((((((K1_02*FE0_f0_C1_D100[ip][j] + K1_12*FE0_f0_C1_D010[ip][j] + K1_22*FE0_f0_C1_D001[ip][j]))*0.5)*n02 + (((K1_01*FE0_f0_C1_D100[ip][j] + K1_11*FE0_f0_C1_D010[ip][j] + K1_21*FE0_f0_C1_D001[ip][j]))*0.5)*n01 + (((K1_00*FE0_f0_C1_D100[ip][j] + K1_10*FE0_f0_C1_D010[ip][j] + K1_20*FE0_f0_C1_D001[ip][j]))*0.5)*n00))*(-1.0))*(FE0_f1_C0[ip][k]*(-1.0)) + ((((((K0_00*FE0_f0_C0_D100[ip][k] + K0_10*FE0_f0_C0_D010[ip][k] + K0_20*FE0_f0_C0_D001[ip][k]))*0.5)*n00 + (((K0_02*FE0_f0_C0_D100[ip][k] + K0_12*FE0_f0_C0_D010[ip][k] + K0_22*FE0_f0_C0_D001[ip][k]))*0.5)*n02 + (((K0_01*FE0_f0_C0_D100[ip][k] + K0_11*FE0_f0_C0_D010[ip][k] + K0_21*FE0_f0_C0_D001[ip][k]))*0.5)*n01))*FE0_f1_C1[ip][j])*(-1.0)))*W3[ip]*det;
              // Number of operations to compute entry: 61
              A[j*16 + k] += ((((((((K0_00*FE0_f0_C0_D100[ip][k] + K0_10*FE0_f0_C0_D010[ip][k] + K0_20*FE0_f0_C0_D001[ip][k]))*0.5)*n00 + (((K0_02*FE0_f0_C0_D100[ip][k] + K0_12*FE0_f0_C0_D010[ip][k] + K0_22*FE0_f0_C0_D001[ip][k]))*0.5)*n02 + (((K0_01*FE0_f0_C0_D100[ip][k] + K0_11*FE0_f0_C0_D010[ip][k] + K0_21*FE0_f0_C0_D001[ip][k]))*0.5)*n01))*(FE0_f1_C0[ip][j]*(-1.0)))*(-1.0) + ((((((K0_00*FE0_f0_C0_D100[ip][j] + K0_10*FE0_f0_C0_D010[ip][j] + K0_20*FE0_f0_C0_D001[ip][j]))*0.5)*n00 + (((K0_01*FE0_f0_C0_D100[ip][j] + K0_11*FE0_f0_C0_D010[ip][j] + K0_21*FE0_f0_C0_D001[ip][j]))*0.5)*n01 + (((K0_02*FE0_f0_C0_D100[ip][j] + K0_12*FE0_f0_C0_D010[ip][j] + K0_22*FE0_f0_C0_D001[ip][j]))*0.5)*n02))*(-1.0))*(FE0_f1_C0[ip][k]*(-1.0))) + ((FE0_f1_C0[ip][j]*(-1.0))*117.451261750142)*(FE0_f1_C0[ip][k]*(-1.0)))*W3[ip]*det;
              // Number of operations to compute entry: 57
              A[(j + 8)*16 + (k + 8)] += (FE0_f1_C1[ip][j]*117.451261750142*FE0_f1_C1[ip][k] + (((((((K1_00*FE0_f0_C1_D100[ip][k] + K1_10*FE0_f0_C1_D010[ip][k] + K1_20*FE0_f0_C1_D001[ip][k]))*0.5)*n00 + (((K1_01*FE0_f0_C1_D100[ip][k] + K1_11*FE0_f0_C1_D010[ip][k] + K1_21*FE0_f0_C1_D001[ip][k]))*0.5)*n01 + (((K1_02*FE0_f0_C1_D100[ip][k] + K1_12*FE0_f0_C1_D010[ip][k] + K1_22*FE0_f0_C1_D001[ip][k]))*0.5)*n02))*FE0_f1_C1[ip][j])*(-1.0) + ((((((K1_02*FE0_f0_C1_D100[ip][j] + K1_12*FE0_f0_C1_D010[ip][j] + K1_22*FE0_f0_C1_D001[ip][j]))*0.5)*n02 + (((K1_01*FE0_f0_C1_D100[ip][j] + K1_11*FE0_f0_C1_D010[ip][j] + K1_21*FE0_f0_C1_D001[ip][j]))*0.5)*n01 + (((K1_00*FE0_f0_C1_D100[ip][j] + K1_10*FE0_f0_C1_D010[ip][j] + K1_20*FE0_f0_C1_D001[ip][j]))*0.5)*n00))*(-1.0))*FE0_f1_C1[ip][k]))*W3[ip]*det;
            }// end loop over 'k'
          }// end loop over 'j'
        }// end loop over 'ip'
          break;
        }
      case 2:
        {
          // Total number of operations to compute element tensor (from this point): 45312
        
        // Loop quadrature points for integral.
        // Number of operations to compute element tensor for following IP loop = 45312
        for (unsigned int ip = 0; ip < 3; ip++)
        {
          
          // Number of operations for primary indices: 15104
          for (unsigned int j = 0; j < 8; j++)
          {
            for (unsigned int k = 0; k < 8; k++)
            {
              // Number of operations to compute entry: 59
              A[j*16 + (k + 8)] += ((((((((K0_00*FE0_f0_C0_D100[ip][j] + K0_10*FE0_f0_C0_D010[ip][j] + K0_20*FE0_f0_C0_D001[ip][j]))*0.5)*n00 + (((K0_01*FE0_f0_C0_D100[ip][j] + K0_11*FE0_f0_C0_D010[ip][j] + K0_21*FE0_f0_C0_D001[ip][j]))*0.5)*n01 + (((K0_02*FE0_f0_C0_D100[ip][j] + K0_12*FE0_f0_C0_D010[ip][j] + K0_22*FE0_f0_C0_D001[ip][j]))*0.5)*n02))*(-1.0))*FE0_f2_C1[ip][k] + ((((((K1_00*FE0_f0_C1_D100[ip][k] + K1_10*FE0_f0_C1_D010[ip][k] + K1_20*FE0_f0_C1_D001[ip][k]))*0.5)*n00 + (((K1_01*FE0_f0_C1_D100[ip][k] + K1_11*FE0_f0_C1_D010[ip][k] + K1_21*FE0_f0_C1_D001[ip][k]))*0.5)*n01 + (((K1_02*FE0_f0_C1_D100[ip][k] + K1_12*FE0_f0_C1_D010[ip][k] + K1_22*FE0_f0_C1_D001[ip][k]))*0.5)*n02))*(FE0_f1_C0[ip][j]*(-1.0)))*(-1.0)) + ((FE0_f1_C0[ip][j]*(-1.0))*117.451261750142)*FE0_f2_C1[ip][k])*W3[ip]*det;
              // Number of operations to compute entry: 59
              A[(j + 8)*16 + k] += ((((((((K0_00*FE0_f0_C0_D100[ip][k] + K0_10*FE0_f0_C0_D010[ip][k] + K0_20*FE0_f0_C0_D001[ip][k]))*0.5)*n00 + (((K0_02*FE0_f0_C0_D100[ip][k] + K0_12*FE0_f0_C0_D010[ip][k] + K0_22*FE0_f0_C0_D001[ip][k]))*0.5)*n02 + (((K0_01*FE0_f0_C0_D100[ip][k] + K0_11*FE0_f0_C0_D010[ip][k] + K0_21*FE0_f0_C0_D001[ip][k]))*0.5)*n01))*FE0_f2_C1[ip][j])*(-1.0) + ((((((K1_02*FE0_f0_C1_D100[ip][j] + K1_12*FE0_f0_C1_D010[ip][j] + K1_22*FE0_f0_C1_D001[ip][j]))*0.5)*n02 + (((K1_01*FE0_f0_C1_D100[ip][j] + K1_11*FE0_f0_C1_D010[ip][j] + K1_21*FE0_f0_C1_D001[ip][j]))*0.5)*n01 + (((K1_00*FE0_f0_C1_D100[ip][j] + K1_10*FE0_f0_C1_D010[ip][j] + K1_20*FE0_f0_C1_D001[ip][j]))*0.5)*n00))*(-1.0))*(FE0_f1_C0[ip][k]*(-1.0))) + FE0_f2_C1[ip][j]*117.451261750142*(FE0_f1_C0[ip][k]*(-1.0)))*W3[ip]*det;
              // Number of operations to compute entry: 61
              A[j*16 + k] += ((((((((K0_00*FE0_f0_C0_D100[ip][k] + K0_10*FE0_f0_C0_D010[ip][k] + K0_20*FE0_f0_C0_D001[ip][k]))*0.5)*n00 + (((K0_02*FE0_f0_C0_D100[ip][k] + K0_12*FE0_f0_C0_D010[ip][k] + K0_22*FE0_f0_C0_D001[ip][k]))*0.5)*n02 + (((K0_01*FE0_f0_C0_D100[ip][k] + K0_11*FE0_f0_C0_D010[ip][k] + K0_21*FE0_f0_C0_D001[ip][k]))*0.5)*n01))*(FE0_f1_C0[ip][j]*(-1.0)))*(-1.0) + ((((((K0_00*FE0_f0_C0_D100[ip][j] + K0_10*FE0_f0_C0_D010[ip][j] + K0_20*FE0_f0_C0_D001[ip][j]))*0.5)*n00 + (((K0_01*FE0_f0_C0_D100[ip][j] + K0_11*FE0_f0_C0_D010[ip][j] + K0_21*FE0_f0_C0_D001[ip][j]))*0.5)*n01 + (((K0_02*FE0_f0_C0_D100[ip][j] + K0_12*FE0_f0_C0_D010[ip][j] + K0_22*FE0_f0_C0_D001[ip][j]))*0.5)*n02))*(-1.0))*(FE0_f1_C0[ip][k]*(-1.0))) + ((FE0_f1_C0[ip][j]*(-1.0))*117.451261750142)*(FE0_f1_C0[ip][k]*(-1.0)))*W3[ip]*det;
              // Number of operations to compute entry: 57
              A[(j + 8)*16 + (k + 8)] += (FE0_f2_C1[ip][j]*117.451261750142*FE0_f2_C1[ip][k] + (((((((K1_02*FE0_f0_C1_D100[ip][j] + K1_12*FE0_f0_C1_D010[ip][j] + K1_22*FE0_f0_C1_D001[ip][j]))*0.5)*n02 + (((K1_01*FE0_f0_C1_D100[ip][j] + K1_11*FE0_f0_C1_D010[ip][j] + K1_21*FE0_f0_C1_D001[ip][j]))*0.5)*n01 + (((K1_00*FE0_f0_C1_D100[ip][j] + K1_10*FE0_f0_C1_D010[ip][j] + K1_20*FE0_f0_C1_D001[ip][j]))*0.5)*n00))*(-1.0))*FE0_f2_C1[ip][k] + ((((((K1_00*FE0_f0_C1_D100[ip][k] + K1_10*FE0_f0_C1_D010[ip][k] + K1_20*FE0_f0_C1_D001[ip][k]))*0.5)*n00 + (((K1_01*FE0_f0_C1_D100[ip][k] + K1_11*FE0_f0_C1_D010[ip][k] + K1_21*FE0_f0_C1_D001[ip][k]))*0.5)*n01 + (((K1_02*FE0_f0_C1_D100[ip][k] + K1_12*FE0_f0_C1_D010[ip][k] + K1_22*FE0_f0_C1_D001[ip][k]))*0.5)*n02))*FE0_f2_C1[ip][j])*(-1.0)))*W3[ip]*det;
            }// end loop over 'k'
          }// end loop over 'j'
        }// end loop over 'ip'
          break;
        }
      case 3:
        {
          // Total number of operations to compute element tensor (from this point): 45312
        
        // Loop quadrature points for integral.
        // Number of operations to compute element tensor for following IP loop = 45312
        for (unsigned int ip = 0; ip < 3; ip++)
        {
          
          // Number of operations for primary indices: 15104
          for (unsigned int j = 0; j < 8; j++)
          {
            for (unsigned int k = 0; k < 8; k++)
            {
              // Number of operations to compute entry: 59
              A[j*16 + (k + 8)] += (((FE0_f1_C0[ip][j]*(-1.0))*117.451261750142)*FE0_f3_C1[ip][k] + (((((((K0_00*FE0_f0_C0_D100[ip][j] + K0_10*FE0_f0_C0_D010[ip][j] + K0_20*FE0_f0_C0_D001[ip][j]))*0.5)*n00 + (((K0_01*FE0_f0_C0_D100[ip][j] + K0_11*FE0_f0_C0_D010[ip][j] + K0_21*FE0_f0_C0_D001[ip][j]))*0.5)*n01 + (((K0_02*FE0_f0_C0_D100[ip][j] + K0_12*FE0_f0_C0_D010[ip][j] + K0_22*FE0_f0_C0_D001[ip][j]))*0.5)*n02))*(-1.0))*FE0_f3_C1[ip][k] + ((((((K1_00*FE0_f0_C1_D100[ip][k] + K1_10*FE0_f0_C1_D010[ip][k] + K1_20*FE0_f0_C1_D001[ip][k]))*0.5)*n00 + (((K1_01*FE0_f0_C1_D100[ip][k] + K1_11*FE0_f0_C1_D010[ip][k] + K1_21*FE0_f0_C1_D001[ip][k]))*0.5)*n01 + (((K1_02*FE0_f0_C1_D100[ip][k] + K1_12*FE0_f0_C1_D010[ip][k] + K1_22*FE0_f0_C1_D001[ip][k]))*0.5)*n02))*(FE0_f1_C0[ip][j]*(-1.0)))*(-1.0)))*W3[ip]*det;
              // Number of operations to compute entry: 59
              A[(j + 8)*16 + k] += (FE0_f3_C1[ip][j]*117.451261750142*(FE0_f1_C0[ip][k]*(-1.0)) + (((((((K0_00*FE0_f0_C0_D100[ip][k] + K0_10*FE0_f0_C0_D010[ip][k] + K0_20*FE0_f0_C0_D001[ip][k]))*0.5)*n00 + (((K0_02*FE0_f0_C0_D100[ip][k] + K0_12*FE0_f0_C0_D010[ip][k] + K0_22*FE0_f0_C0_D001[ip][k]))*0.5)*n02 + (((K0_01*FE0_f0_C0_D100[ip][k] + K0_11*FE0_f0_C0_D010[ip][k] + K0_21*FE0_f0_C0_D001[ip][k]))*0.5)*n01))*FE0_f3_C1[ip][j])*(-1.0) + ((((((K1_02*FE0_f0_C1_D100[ip][j] + K1_12*FE0_f0_C1_D010[ip][j] + K1_22*FE0_f0_C1_D001[ip][j]))*0.5)*n02 + (((K1_01*FE0_f0_C1_D100[ip][j] + K1_11*FE0_f0_C1_D010[ip][j] + K1_21*FE0_f0_C1_D001[ip][j]))*0.5)*n01 + (((K1_00*FE0_f0_C1_D100[ip][j] + K1_10*FE0_f0_C1_D010[ip][j] + K1_20*FE0_f0_C1_D001[ip][j]))*0.5)*n00))*(-1.0))*(FE0_f1_C0[ip][k]*(-1.0))))*W3[ip]*det;
              // Number of operations to compute entry: 61
              A[j*16 + k] += ((((((((K0_00*FE0_f0_C0_D100[ip][k] + K0_10*FE0_f0_C0_D010[ip][k] + K0_20*FE0_f0_C0_D001[ip][k]))*0.5)*n00 + (((K0_02*FE0_f0_C0_D100[ip][k] + K0_12*FE0_f0_C0_D010[ip][k] + K0_22*FE0_f0_C0_D001[ip][k]))*0.5)*n02 + (((K0_01*FE0_f0_C0_D100[ip][k] + K0_11*FE0_f0_C0_D010[ip][k] + K0_21*FE0_f0_C0_D001[ip][k]))*0.5)*n01))*(FE0_f1_C0[ip][j]*(-1.0)))*(-1.0) + ((((((K0_00*FE0_f0_C0_D100[ip][j] + K0_10*FE0_f0_C0_D010[ip][j] + K0_20*FE0_f0_C0_D001[ip][j]))*0.5)*n00 + (((K0_01*FE0_f0_C0_D100[ip][j] + K0_11*FE0_f0_C0_D010[ip][j] + K0_21*FE0_f0_C0_D001[ip][j]))*0.5)*n01 + (((K0_02*FE0_f0_C0_D100[ip][j] + K0_12*FE0_f0_C0_D010[ip][j] + K0_22*FE0_f0_C0_D001[ip][j]))*0.5)*n02))*(-1.0))*(FE0_f1_C0[ip][k]*(-1.0))) + ((FE0_f1_C0[ip][j]*(-1.0))*117.451261750142)*(FE0_f1_C0[ip][k]*(-1.0)))*W3[ip]*det;
              // Number of operations to compute entry: 57
              A[(j + 8)*16 + (k + 8)] += (FE0_f3_C1[ip][j]*117.451261750142*FE0_f3_C1[ip][k] + (((((((K1_02*FE0_f0_C1_D100[ip][j] + K1_12*FE0_f0_C1_D010[ip][j] + K1_22*FE0_f0_C1_D001[ip][j]))*0.5)*n02 + (((K1_01*FE0_f0_C1_D100[ip][j] + K1_11*FE0_f0_C1_D010[ip][j] + K1_21*FE0_f0_C1_D001[ip][j]))*0.5)*n01 + (((K1_00*FE0_f0_C1_D100[ip][j] + K1_10*FE0_f0_C1_D010[ip][j] + K1_20*FE0_f0_C1_D001[ip][j]))*0.5)*n00))*(-1.0))*FE0_f3_C1[ip][k] + ((((((K1_00*FE0_f0_C1_D100[ip][k] + K1_10*FE0_f0_C1_D010[ip][k] + K1_20*FE0_f0_C1_D001[ip][k]))*0.5)*n00 + (((K1_01*FE0_f0_C1_D100[ip][k] + K1_11*FE0_f0_C1_D010[ip][k] + K1_21*FE0_f0_C1_D001[ip][k]))*0.5)*n01 + (((K1_02*FE0_f0_C1_D100[ip][k] + K1_12*FE0_f0_C1_D010[ip][k] + K1_22*FE0_f0_C1_D001[ip][k]))*0.5)*n02))*FE0_f3_C1[ip][j])*(-1.0)))*W3[ip]*det;
            }// end loop over 'k'
          }// end loop over 'j'
        }// end loop over 'ip'
          break;
        }
      }
      
        break;
      }
    case 2:
      {
        switch (facet1)
      {
      case 0:
        {
          // Total number of operations to compute element tensor (from this point): 45312
        
        // Loop quadrature points for integral.
        // Number of operations to compute element tensor for following IP loop = 45312
        for (unsigned int ip = 0; ip < 3; ip++)
        {
          
          // Number of operations for primary indices: 15104
          for (unsigned int j = 0; j < 8; j++)
          {
            for (unsigned int k = 0; k < 8; k++)
            {
              // Number of operations to compute entry: 59
              A[j*16 + (k + 8)] += (((FE0_f2_C0[ip][j]*(-1.0))*117.451261750142)*FE0_f0_C1[ip][k] + (((((((K1_00*FE0_f0_C1_D100[ip][k] + K1_10*FE0_f0_C1_D010[ip][k] + K1_20*FE0_f0_C1_D001[ip][k]))*0.5)*n00 + (((K1_01*FE0_f0_C1_D100[ip][k] + K1_11*FE0_f0_C1_D010[ip][k] + K1_21*FE0_f0_C1_D001[ip][k]))*0.5)*n01 + (((K1_02*FE0_f0_C1_D100[ip][k] + K1_12*FE0_f0_C1_D010[ip][k] + K1_22*FE0_f0_C1_D001[ip][k]))*0.5)*n02))*(FE0_f2_C0[ip][j]*(-1.0)))*(-1.0) + ((((((K0_00*FE0_f0_C0_D100[ip][j] + K0_10*FE0_f0_C0_D010[ip][j] + K0_20*FE0_f0_C0_D001[ip][j]))*0.5)*n00 + (((K0_01*FE0_f0_C0_D100[ip][j] + K0_11*FE0_f0_C0_D010[ip][j] + K0_21*FE0_f0_C0_D001[ip][j]))*0.5)*n01 + (((K0_02*FE0_f0_C0_D100[ip][j] + K0_12*FE0_f0_C0_D010[ip][j] + K0_22*FE0_f0_C0_D001[ip][j]))*0.5)*n02))*(-1.0))*FE0_f0_C1[ip][k]))*W3[ip]*det;
              // Number of operations to compute entry: 59
              A[(j + 8)*16 + k] += (FE0_f0_C1[ip][j]*117.451261750142*(FE0_f2_C0[ip][k]*(-1.0)) + (((((((K0_00*FE0_f0_C0_D100[ip][k] + K0_10*FE0_f0_C0_D010[ip][k] + K0_20*FE0_f0_C0_D001[ip][k]))*0.5)*n00 + (((K0_02*FE0_f0_C0_D100[ip][k] + K0_12*FE0_f0_C0_D010[ip][k] + K0_22*FE0_f0_C0_D001[ip][k]))*0.5)*n02 + (((K0_01*FE0_f0_C0_D100[ip][k] + K0_11*FE0_f0_C0_D010[ip][k] + K0_21*FE0_f0_C0_D001[ip][k]))*0.5)*n01))*FE0_f0_C1[ip][j])*(-1.0) + ((((((K1_02*FE0_f0_C1_D100[ip][j] + K1_12*FE0_f0_C1_D010[ip][j] + K1_22*FE0_f0_C1_D001[ip][j]))*0.5)*n02 + (((K1_01*FE0_f0_C1_D100[ip][j] + K1_11*FE0_f0_C1_D010[ip][j] + K1_21*FE0_f0_C1_D001[ip][j]))*0.5)*n01 + (((K1_00*FE0_f0_C1_D100[ip][j] + K1_10*FE0_f0_C1_D010[ip][j] + K1_20*FE0_f0_C1_D001[ip][j]))*0.5)*n00))*(-1.0))*(FE0_f2_C0[ip][k]*(-1.0))))*W3[ip]*det;
              // Number of operations to compute entry: 61
              A[j*16 + k] += (((FE0_f2_C0[ip][j]*(-1.0))*117.451261750142)*(FE0_f2_C0[ip][k]*(-1.0)) + (((((((K0_00*FE0_f0_C0_D100[ip][j] + K0_10*FE0_f0_C0_D010[ip][j] + K0_20*FE0_f0_C0_D001[ip][j]))*0.5)*n00 + (((K0_01*FE0_f0_C0_D100[ip][j] + K0_11*FE0_f0_C0_D010[ip][j] + K0_21*FE0_f0_C0_D001[ip][j]))*0.5)*n01 + (((K0_02*FE0_f0_C0_D100[ip][j] + K0_12*FE0_f0_C0_D010[ip][j] + K0_22*FE0_f0_C0_D001[ip][j]))*0.5)*n02))*(-1.0))*(FE0_f2_C0[ip][k]*(-1.0)) + ((((((K0_00*FE0_f0_C0_D100[ip][k] + K0_10*FE0_f0_C0_D010[ip][k] + K0_20*FE0_f0_C0_D001[ip][k]))*0.5)*n00 + (((K0_02*FE0_f0_C0_D100[ip][k] + K0_12*FE0_f0_C0_D010[ip][k] + K0_22*FE0_f0_C0_D001[ip][k]))*0.5)*n02 + (((K0_01*FE0_f0_C0_D100[ip][k] + K0_11*FE0_f0_C0_D010[ip][k] + K0_21*FE0_f0_C0_D001[ip][k]))*0.5)*n01))*(FE0_f2_C0[ip][j]*(-1.0)))*(-1.0)))*W3[ip]*det;
              // Number of operations to compute entry: 57
              A[(j + 8)*16 + (k + 8)] += (FE0_f0_C1[ip][j]*117.451261750142*FE0_f0_C1[ip][k] + (((((((K1_02*FE0_f0_C1_D100[ip][j] + K1_12*FE0_f0_C1_D010[ip][j] + K1_22*FE0_f0_C1_D001[ip][j]))*0.5)*n02 + (((K1_01*FE0_f0_C1_D100[ip][j] + K1_11*FE0_f0_C1_D010[ip][j] + K1_21*FE0_f0_C1_D001[ip][j]))*0.5)*n01 + (((K1_00*FE0_f0_C1_D100[ip][j] + K1_10*FE0_f0_C1_D010[ip][j] + K1_20*FE0_f0_C1_D001[ip][j]))*0.5)*n00))*(-1.0))*FE0_f0_C1[ip][k] + ((((((K1_00*FE0_f0_C1_D100[ip][k] + K1_10*FE0_f0_C1_D010[ip][k] + K1_20*FE0_f0_C1_D001[ip][k]))*0.5)*n00 + (((K1_01*FE0_f0_C1_D100[ip][k] + K1_11*FE0_f0_C1_D010[ip][k] + K1_21*FE0_f0_C1_D001[ip][k]))*0.5)*n01 + (((K1_02*FE0_f0_C1_D100[ip][k] + K1_12*FE0_f0_C1_D010[ip][k] + K1_22*FE0_f0_C1_D001[ip][k]))*0.5)*n02))*FE0_f0_C1[ip][j])*(-1.0)))*W3[ip]*det;
            }// end loop over 'k'
          }// end loop over 'j'
        }// end loop over 'ip'
          break;
        }
      case 1:
        {
          // Total number of operations to compute element tensor (from this point): 45312
        
        // Loop quadrature points for integral.
        // Number of operations to compute element tensor for following IP loop = 45312
        for (unsigned int ip = 0; ip < 3; ip++)
        {
          
          // Number of operations for primary indices: 15104
          for (unsigned int j = 0; j < 8; j++)
          {
            for (unsigned int k = 0; k < 8; k++)
            {
              // Number of operations to compute entry: 59
              A[j*16 + (k + 8)] += ((((((((K0_00*FE0_f0_C0_D100[ip][j] + K0_10*FE0_f0_C0_D010[ip][j] + K0_20*FE0_f0_C0_D001[ip][j]))*0.5)*n00 + (((K0_01*FE0_f0_C0_D100[ip][j] + K0_11*FE0_f0_C0_D010[ip][j] + K0_21*FE0_f0_C0_D001[ip][j]))*0.5)*n01 + (((K0_02*FE0_f0_C0_D100[ip][j] + K0_12*FE0_f0_C0_D010[ip][j] + K0_22*FE0_f0_C0_D001[ip][j]))*0.5)*n02))*(-1.0))*FE0_f1_C1[ip][k] + ((((((K1_00*FE0_f0_C1_D100[ip][k] + K1_10*FE0_f0_C1_D010[ip][k] + K1_20*FE0_f0_C1_D001[ip][k]))*0.5)*n00 + (((K1_01*FE0_f0_C1_D100[ip][k] + K1_11*FE0_f0_C1_D010[ip][k] + K1_21*FE0_f0_C1_D001[ip][k]))*0.5)*n01 + (((K1_02*FE0_f0_C1_D100[ip][k] + K1_12*FE0_f0_C1_D010[ip][k] + K1_22*FE0_f0_C1_D001[ip][k]))*0.5)*n02))*(FE0_f2_C0[ip][j]*(-1.0)))*(-1.0)) + ((FE0_f2_C0[ip][j]*(-1.0))*117.451261750142)*FE0_f1_C1[ip][k])*W3[ip]*det;
              // Number of operations to compute entry: 59
              A[(j + 8)*16 + k] += ((((((((K1_02*FE0_f0_C1_D100[ip][j] + K1_12*FE0_f0_C1_D010[ip][j] + K1_22*FE0_f0_C1_D001[ip][j]))*0.5)*n02 + (((K1_01*FE0_f0_C1_D100[ip][j] + K1_11*FE0_f0_C1_D010[ip][j] + K1_21*FE0_f0_C1_D001[ip][j]))*0.5)*n01 + (((K1_00*FE0_f0_C1_D100[ip][j] + K1_10*FE0_f0_C1_D010[ip][j] + K1_20*FE0_f0_C1_D001[ip][j]))*0.5)*n00))*(-1.0))*(FE0_f2_C0[ip][k]*(-1.0)) + ((((((K0_00*FE0_f0_C0_D100[ip][k] + K0_10*FE0_f0_C0_D010[ip][k] + K0_20*FE0_f0_C0_D001[ip][k]))*0.5)*n00 + (((K0_02*FE0_f0_C0_D100[ip][k] + K0_12*FE0_f0_C0_D010[ip][k] + K0_22*FE0_f0_C0_D001[ip][k]))*0.5)*n02 + (((K0_01*FE0_f0_C0_D100[ip][k] + K0_11*FE0_f0_C0_D010[ip][k] + K0_21*FE0_f0_C0_D001[ip][k]))*0.5)*n01))*FE0_f1_C1[ip][j])*(-1.0)) + FE0_f1_C1[ip][j]*117.451261750142*(FE0_f2_C0[ip][k]*(-1.0)))*W3[ip]*det;
              // Number of operations to compute entry: 61
              A[j*16 + k] += (((FE0_f2_C0[ip][j]*(-1.0))*117.451261750142)*(FE0_f2_C0[ip][k]*(-1.0)) + (((((((K0_00*FE0_f0_C0_D100[ip][j] + K0_10*FE0_f0_C0_D010[ip][j] + K0_20*FE0_f0_C0_D001[ip][j]))*0.5)*n00 + (((K0_01*FE0_f0_C0_D100[ip][j] + K0_11*FE0_f0_C0_D010[ip][j] + K0_21*FE0_f0_C0_D001[ip][j]))*0.5)*n01 + (((K0_02*FE0_f0_C0_D100[ip][j] + K0_12*FE0_f0_C0_D010[ip][j] + K0_22*FE0_f0_C0_D001[ip][j]))*0.5)*n02))*(-1.0))*(FE0_f2_C0[ip][k]*(-1.0)) + ((((((K0_00*FE0_f0_C0_D100[ip][k] + K0_10*FE0_f0_C0_D010[ip][k] + K0_20*FE0_f0_C0_D001[ip][k]))*0.5)*n00 + (((K0_02*FE0_f0_C0_D100[ip][k] + K0_12*FE0_f0_C0_D010[ip][k] + K0_22*FE0_f0_C0_D001[ip][k]))*0.5)*n02 + (((K0_01*FE0_f0_C0_D100[ip][k] + K0_11*FE0_f0_C0_D010[ip][k] + K0_21*FE0_f0_C0_D001[ip][k]))*0.5)*n01))*(FE0_f2_C0[ip][j]*(-1.0)))*(-1.0)))*W3[ip]*det;
              // Number of operations to compute entry: 57
              A[(j + 8)*16 + (k + 8)] += (FE0_f1_C1[ip][j]*117.451261750142*FE0_f1_C1[ip][k] + (((((((K1_00*FE0_f0_C1_D100[ip][k] + K1_10*FE0_f0_C1_D010[ip][k] + K1_20*FE0_f0_C1_D001[ip][k]))*0.5)*n00 + (((K1_01*FE0_f0_C1_D100[ip][k] + K1_11*FE0_f0_C1_D010[ip][k] + K1_21*FE0_f0_C1_D001[ip][k]))*0.5)*n01 + (((K1_02*FE0_f0_C1_D100[ip][k] + K1_12*FE0_f0_C1_D010[ip][k] + K1_22*FE0_f0_C1_D001[ip][k]))*0.5)*n02))*FE0_f1_C1[ip][j])*(-1.0) + ((((((K1_02*FE0_f0_C1_D100[ip][j] + K1_12*FE0_f0_C1_D010[ip][j] + K1_22*FE0_f0_C1_D001[ip][j]))*0.5)*n02 + (((K1_01*FE0_f0_C1_D100[ip][j] + K1_11*FE0_f0_C1_D010[ip][j] + K1_21*FE0_f0_C1_D001[ip][j]))*0.5)*n01 + (((K1_00*FE0_f0_C1_D100[ip][j] + K1_10*FE0_f0_C1_D010[ip][j] + K1_20*FE0_f0_C1_D001[ip][j]))*0.5)*n00))*(-1.0))*FE0_f1_C1[ip][k]))*W3[ip]*det;
            }// end loop over 'k'
          }// end loop over 'j'
        }// end loop over 'ip'
          break;
        }
      case 2:
        {
          // Total number of operations to compute element tensor (from this point): 45312
        
        // Loop quadrature points for integral.
        // Number of operations to compute element tensor for following IP loop = 45312
        for (unsigned int ip = 0; ip < 3; ip++)
        {
          
          // Number of operations for primary indices: 15104
          for (unsigned int j = 0; j < 8; j++)
          {
            for (unsigned int k = 0; k < 8; k++)
            {
              // Number of operations to compute entry: 59
              A[j*16 + (k + 8)] += (((FE0_f2_C0[ip][j]*(-1.0))*117.451261750142)*FE0_f2_C1[ip][k] + (((((((K0_00*FE0_f0_C0_D100[ip][j] + K0_10*FE0_f0_C0_D010[ip][j] + K0_20*FE0_f0_C0_D001[ip][j]))*0.5)*n00 + (((K0_01*FE0_f0_C0_D100[ip][j] + K0_11*FE0_f0_C0_D010[ip][j] + K0_21*FE0_f0_C0_D001[ip][j]))*0.5)*n01 + (((K0_02*FE0_f0_C0_D100[ip][j] + K0_12*FE0_f0_C0_D010[ip][j] + K0_22*FE0_f0_C0_D001[ip][j]))*0.5)*n02))*(-1.0))*FE0_f2_C1[ip][k] + ((((((K1_00*FE0_f0_C1_D100[ip][k] + K1_10*FE0_f0_C1_D010[ip][k] + K1_20*FE0_f0_C1_D001[ip][k]))*0.5)*n00 + (((K1_01*FE0_f0_C1_D100[ip][k] + K1_11*FE0_f0_C1_D010[ip][k] + K1_21*FE0_f0_C1_D001[ip][k]))*0.5)*n01 + (((K1_02*FE0_f0_C1_D100[ip][k] + K1_12*FE0_f0_C1_D010[ip][k] + K1_22*FE0_f0_C1_D001[ip][k]))*0.5)*n02))*(FE0_f2_C0[ip][j]*(-1.0)))*(-1.0)))*W3[ip]*det;
              // Number of operations to compute entry: 59
              A[(j + 8)*16 + k] += (FE0_f2_C1[ip][j]*117.451261750142*(FE0_f2_C0[ip][k]*(-1.0)) + (((((((K0_00*FE0_f0_C0_D100[ip][k] + K0_10*FE0_f0_C0_D010[ip][k] + K0_20*FE0_f0_C0_D001[ip][k]))*0.5)*n00 + (((K0_02*FE0_f0_C0_D100[ip][k] + K0_12*FE0_f0_C0_D010[ip][k] + K0_22*FE0_f0_C0_D001[ip][k]))*0.5)*n02 + (((K0_01*FE0_f0_C0_D100[ip][k] + K0_11*FE0_f0_C0_D010[ip][k] + K0_21*FE0_f0_C0_D001[ip][k]))*0.5)*n01))*FE0_f2_C1[ip][j])*(-1.0) + ((((((K1_02*FE0_f0_C1_D100[ip][j] + K1_12*FE0_f0_C1_D010[ip][j] + K1_22*FE0_f0_C1_D001[ip][j]))*0.5)*n02 + (((K1_01*FE0_f0_C1_D100[ip][j] + K1_11*FE0_f0_C1_D010[ip][j] + K1_21*FE0_f0_C1_D001[ip][j]))*0.5)*n01 + (((K1_00*FE0_f0_C1_D100[ip][j] + K1_10*FE0_f0_C1_D010[ip][j] + K1_20*FE0_f0_C1_D001[ip][j]))*0.5)*n00))*(-1.0))*(FE0_f2_C0[ip][k]*(-1.0))))*W3[ip]*det;
              // Number of operations to compute entry: 61
              A[j*16 + k] += (((FE0_f2_C0[ip][j]*(-1.0))*117.451261750142)*(FE0_f2_C0[ip][k]*(-1.0)) + (((((((K0_00*FE0_f0_C0_D100[ip][j] + K0_10*FE0_f0_C0_D010[ip][j] + K0_20*FE0_f0_C0_D001[ip][j]))*0.5)*n00 + (((K0_01*FE0_f0_C0_D100[ip][j] + K0_11*FE0_f0_C0_D010[ip][j] + K0_21*FE0_f0_C0_D001[ip][j]))*0.5)*n01 + (((K0_02*FE0_f0_C0_D100[ip][j] + K0_12*FE0_f0_C0_D010[ip][j] + K0_22*FE0_f0_C0_D001[ip][j]))*0.5)*n02))*(-1.0))*(FE0_f2_C0[ip][k]*(-1.0)) + ((((((K0_00*FE0_f0_C0_D100[ip][k] + K0_10*FE0_f0_C0_D010[ip][k] + K0_20*FE0_f0_C0_D001[ip][k]))*0.5)*n00 + (((K0_02*FE0_f0_C0_D100[ip][k] + K0_12*FE0_f0_C0_D010[ip][k] + K0_22*FE0_f0_C0_D001[ip][k]))*0.5)*n02 + (((K0_01*FE0_f0_C0_D100[ip][k] + K0_11*FE0_f0_C0_D010[ip][k] + K0_21*FE0_f0_C0_D001[ip][k]))*0.5)*n01))*(FE0_f2_C0[ip][j]*(-1.0)))*(-1.0)))*W3[ip]*det;
              // Number of operations to compute entry: 57
              A[(j + 8)*16 + (k + 8)] += (FE0_f2_C1[ip][j]*117.451261750142*FE0_f2_C1[ip][k] + (((((((K1_02*FE0_f0_C1_D100[ip][j] + K1_12*FE0_f0_C1_D010[ip][j] + K1_22*FE0_f0_C1_D001[ip][j]))*0.5)*n02 + (((K1_01*FE0_f0_C1_D100[ip][j] + K1_11*FE0_f0_C1_D010[ip][j] + K1_21*FE0_f0_C1_D001[ip][j]))*0.5)*n01 + (((K1_00*FE0_f0_C1_D100[ip][j] + K1_10*FE0_f0_C1_D010[ip][j] + K1_20*FE0_f0_C1_D001[ip][j]))*0.5)*n00))*(-1.0))*FE0_f2_C1[ip][k] + ((((((K1_00*FE0_f0_C1_D100[ip][k] + K1_10*FE0_f0_C1_D010[ip][k] + K1_20*FE0_f0_C1_D001[ip][k]))*0.5)*n00 + (((K1_01*FE0_f0_C1_D100[ip][k] + K1_11*FE0_f0_C1_D010[ip][k] + K1_21*FE0_f0_C1_D001[ip][k]))*0.5)*n01 + (((K1_02*FE0_f0_C1_D100[ip][k] + K1_12*FE0_f0_C1_D010[ip][k] + K1_22*FE0_f0_C1_D001[ip][k]))*0.5)*n02))*FE0_f2_C1[ip][j])*(-1.0)))*W3[ip]*det;
            }// end loop over 'k'
          }// end loop over 'j'
        }// end loop over 'ip'
          break;
        }
      case 3:
        {
          // Total number of operations to compute element tensor (from this point): 45312
        
        // Loop quadrature points for integral.
        // Number of operations to compute element tensor for following IP loop = 45312
        for (unsigned int ip = 0; ip < 3; ip++)
        {
          
          // Number of operations for primary indices: 15104
          for (unsigned int j = 0; j < 8; j++)
          {
            for (unsigned int k = 0; k < 8; k++)
            {
              // Number of operations to compute entry: 59
              A[j*16 + (k + 8)] += (((FE0_f2_C0[ip][j]*(-1.0))*117.451261750142)*FE0_f3_C1[ip][k] + (((((((K1_00*FE0_f0_C1_D100[ip][k] + K1_10*FE0_f0_C1_D010[ip][k] + K1_20*FE0_f0_C1_D001[ip][k]))*0.5)*n00 + (((K1_01*FE0_f0_C1_D100[ip][k] + K1_11*FE0_f0_C1_D010[ip][k] + K1_21*FE0_f0_C1_D001[ip][k]))*0.5)*n01 + (((K1_02*FE0_f0_C1_D100[ip][k] + K1_12*FE0_f0_C1_D010[ip][k] + K1_22*FE0_f0_C1_D001[ip][k]))*0.5)*n02))*(FE0_f2_C0[ip][j]*(-1.0)))*(-1.0) + ((((((K0_00*FE0_f0_C0_D100[ip][j] + K0_10*FE0_f0_C0_D010[ip][j] + K0_20*FE0_f0_C0_D001[ip][j]))*0.5)*n00 + (((K0_01*FE0_f0_C0_D100[ip][j] + K0_11*FE0_f0_C0_D010[ip][j] + K0_21*FE0_f0_C0_D001[ip][j]))*0.5)*n01 + (((K0_02*FE0_f0_C0_D100[ip][j] + K0_12*FE0_f0_C0_D010[ip][j] + K0_22*FE0_f0_C0_D001[ip][j]))*0.5)*n02))*(-1.0))*FE0_f3_C1[ip][k]))*W3[ip]*det;
              // Number of operations to compute entry: 59
              A[(j + 8)*16 + k] += (FE0_f3_C1[ip][j]*117.451261750142*(FE0_f2_C0[ip][k]*(-1.0)) + (((((((K0_00*FE0_f0_C0_D100[ip][k] + K0_10*FE0_f0_C0_D010[ip][k] + K0_20*FE0_f0_C0_D001[ip][k]))*0.5)*n00 + (((K0_02*FE0_f0_C0_D100[ip][k] + K0_12*FE0_f0_C0_D010[ip][k] + K0_22*FE0_f0_C0_D001[ip][k]))*0.5)*n02 + (((K0_01*FE0_f0_C0_D100[ip][k] + K0_11*FE0_f0_C0_D010[ip][k] + K0_21*FE0_f0_C0_D001[ip][k]))*0.5)*n01))*FE0_f3_C1[ip][j])*(-1.0) + ((((((K1_02*FE0_f0_C1_D100[ip][j] + K1_12*FE0_f0_C1_D010[ip][j] + K1_22*FE0_f0_C1_D001[ip][j]))*0.5)*n02 + (((K1_01*FE0_f0_C1_D100[ip][j] + K1_11*FE0_f0_C1_D010[ip][j] + K1_21*FE0_f0_C1_D001[ip][j]))*0.5)*n01 + (((K1_00*FE0_f0_C1_D100[ip][j] + K1_10*FE0_f0_C1_D010[ip][j] + K1_20*FE0_f0_C1_D001[ip][j]))*0.5)*n00))*(-1.0))*(FE0_f2_C0[ip][k]*(-1.0))))*W3[ip]*det;
              // Number of operations to compute entry: 61
              A[j*16 + k] += (((FE0_f2_C0[ip][j]*(-1.0))*117.451261750142)*(FE0_f2_C0[ip][k]*(-1.0)) + (((((((K0_00*FE0_f0_C0_D100[ip][j] + K0_10*FE0_f0_C0_D010[ip][j] + K0_20*FE0_f0_C0_D001[ip][j]))*0.5)*n00 + (((K0_01*FE0_f0_C0_D100[ip][j] + K0_11*FE0_f0_C0_D010[ip][j] + K0_21*FE0_f0_C0_D001[ip][j]))*0.5)*n01 + (((K0_02*FE0_f0_C0_D100[ip][j] + K0_12*FE0_f0_C0_D010[ip][j] + K0_22*FE0_f0_C0_D001[ip][j]))*0.5)*n02))*(-1.0))*(FE0_f2_C0[ip][k]*(-1.0)) + ((((((K0_00*FE0_f0_C0_D100[ip][k] + K0_10*FE0_f0_C0_D010[ip][k] + K0_20*FE0_f0_C0_D001[ip][k]))*0.5)*n00 + (((K0_02*FE0_f0_C0_D100[ip][k] + K0_12*FE0_f0_C0_D010[ip][k] + K0_22*FE0_f0_C0_D001[ip][k]))*0.5)*n02 + (((K0_01*FE0_f0_C0_D100[ip][k] + K0_11*FE0_f0_C0_D010[ip][k] + K0_21*FE0_f0_C0_D001[ip][k]))*0.5)*n01))*(FE0_f2_C0[ip][j]*(-1.0)))*(-1.0)))*W3[ip]*det;
              // Number of operations to compute entry: 57
              A[(j + 8)*16 + (k + 8)] += (FE0_f3_C1[ip][j]*117.451261750142*FE0_f3_C1[ip][k] + (((((((K1_02*FE0_f0_C1_D100[ip][j] + K1_12*FE0_f0_C1_D010[ip][j] + K1_22*FE0_f0_C1_D001[ip][j]))*0.5)*n02 + (((K1_01*FE0_f0_C1_D100[ip][j] + K1_11*FE0_f0_C1_D010[ip][j] + K1_21*FE0_f0_C1_D001[ip][j]))*0.5)*n01 + (((K1_00*FE0_f0_C1_D100[ip][j] + K1_10*FE0_f0_C1_D010[ip][j] + K1_20*FE0_f0_C1_D001[ip][j]))*0.5)*n00))*(-1.0))*FE0_f3_C1[ip][k] + ((((((K1_00*FE0_f0_C1_D100[ip][k] + K1_10*FE0_f0_C1_D010[ip][k] + K1_20*FE0_f0_C1_D001[ip][k]))*0.5)*n00 + (((K1_01*FE0_f0_C1_D100[ip][k] + K1_11*FE0_f0_C1_D010[ip][k] + K1_21*FE0_f0_C1_D001[ip][k]))*0.5)*n01 + (((K1_02*FE0_f0_C1_D100[ip][k] + K1_12*FE0_f0_C1_D010[ip][k] + K1_22*FE0_f0_C1_D001[ip][k]))*0.5)*n02))*FE0_f3_C1[ip][j])*(-1.0)))*W3[ip]*det;
            }// end loop over 'k'
          }// end loop over 'j'
        }// end loop over 'ip'
          break;
        }
      }
      
        break;
      }
    case 3:
      {
        switch (facet1)
      {
      case 0:
        {
          // Total number of operations to compute element tensor (from this point): 45312
        
        // Loop quadrature points for integral.
        // Number of operations to compute element tensor for following IP loop = 45312
        for (unsigned int ip = 0; ip < 3; ip++)
        {
          
          // Number of operations for primary indices: 15104
          for (unsigned int j = 0; j < 8; j++)
          {
            for (unsigned int k = 0; k < 8; k++)
            {
              // Number of operations to compute entry: 59
              A[j*16 + (k + 8)] += (((FE0_f3_C0[ip][j]*(-1.0))*117.451261750142)*FE0_f0_C1[ip][k] + (((((((K1_00*FE0_f0_C1_D100[ip][k] + K1_10*FE0_f0_C1_D010[ip][k] + K1_20*FE0_f0_C1_D001[ip][k]))*0.5)*n00 + (((K1_01*FE0_f0_C1_D100[ip][k] + K1_11*FE0_f0_C1_D010[ip][k] + K1_21*FE0_f0_C1_D001[ip][k]))*0.5)*n01 + (((K1_02*FE0_f0_C1_D100[ip][k] + K1_12*FE0_f0_C1_D010[ip][k] + K1_22*FE0_f0_C1_D001[ip][k]))*0.5)*n02))*(FE0_f3_C0[ip][j]*(-1.0)))*(-1.0) + ((((((K0_00*FE0_f0_C0_D100[ip][j] + K0_10*FE0_f0_C0_D010[ip][j] + K0_20*FE0_f0_C0_D001[ip][j]))*0.5)*n00 + (((K0_01*FE0_f0_C0_D100[ip][j] + K0_11*FE0_f0_C0_D010[ip][j] + K0_21*FE0_f0_C0_D001[ip][j]))*0.5)*n01 + (((K0_02*FE0_f0_C0_D100[ip][j] + K0_12*FE0_f0_C0_D010[ip][j] + K0_22*FE0_f0_C0_D001[ip][j]))*0.5)*n02))*(-1.0))*FE0_f0_C1[ip][k]))*W3[ip]*det;
              // Number of operations to compute entry: 59
              A[(j + 8)*16 + k] += (FE0_f0_C1[ip][j]*117.451261750142*(FE0_f3_C0[ip][k]*(-1.0)) + (((((((K0_00*FE0_f0_C0_D100[ip][k] + K0_10*FE0_f0_C0_D010[ip][k] + K0_20*FE0_f0_C0_D001[ip][k]))*0.5)*n00 + (((K0_02*FE0_f0_C0_D100[ip][k] + K0_12*FE0_f0_C0_D010[ip][k] + K0_22*FE0_f0_C0_D001[ip][k]))*0.5)*n02 + (((K0_01*FE0_f0_C0_D100[ip][k] + K0_11*FE0_f0_C0_D010[ip][k] + K0_21*FE0_f0_C0_D001[ip][k]))*0.5)*n01))*FE0_f0_C1[ip][j])*(-1.0) + ((((((K1_02*FE0_f0_C1_D100[ip][j] + K1_12*FE0_f0_C1_D010[ip][j] + K1_22*FE0_f0_C1_D001[ip][j]))*0.5)*n02 + (((K1_01*FE0_f0_C1_D100[ip][j] + K1_11*FE0_f0_C1_D010[ip][j] + K1_21*FE0_f0_C1_D001[ip][j]))*0.5)*n01 + (((K1_00*FE0_f0_C1_D100[ip][j] + K1_10*FE0_f0_C1_D010[ip][j] + K1_20*FE0_f0_C1_D001[ip][j]))*0.5)*n00))*(-1.0))*(FE0_f3_C0[ip][k]*(-1.0))))*W3[ip]*det;
              // Number of operations to compute entry: 61
              A[j*16 + k] += ((((((((K0_00*FE0_f0_C0_D100[ip][k] + K0_10*FE0_f0_C0_D010[ip][k] + K0_20*FE0_f0_C0_D001[ip][k]))*0.5)*n00 + (((K0_02*FE0_f0_C0_D100[ip][k] + K0_12*FE0_f0_C0_D010[ip][k] + K0_22*FE0_f0_C0_D001[ip][k]))*0.5)*n02 + (((K0_01*FE0_f0_C0_D100[ip][k] + K0_11*FE0_f0_C0_D010[ip][k] + K0_21*FE0_f0_C0_D001[ip][k]))*0.5)*n01))*(FE0_f3_C0[ip][j]*(-1.0)))*(-1.0) + ((((((K0_00*FE0_f0_C0_D100[ip][j] + K0_10*FE0_f0_C0_D010[ip][j] + K0_20*FE0_f0_C0_D001[ip][j]))*0.5)*n00 + (((K0_01*FE0_f0_C0_D100[ip][j] + K0_11*FE0_f0_C0_D010[ip][j] + K0_21*FE0_f0_C0_D001[ip][j]))*0.5)*n01 + (((K0_02*FE0_f0_C0_D100[ip][j] + K0_12*FE0_f0_C0_D010[ip][j] + K0_22*FE0_f0_C0_D001[ip][j]))*0.5)*n02))*(-1.0))*(FE0_f3_C0[ip][k]*(-1.0))) + ((FE0_f3_C0[ip][j]*(-1.0))*117.451261750142)*(FE0_f3_C0[ip][k]*(-1.0)))*W3[ip]*det;
              // Number of operations to compute entry: 57
              A[(j + 8)*16 + (k + 8)] += (FE0_f0_C1[ip][j]*117.451261750142*FE0_f0_C1[ip][k] + (((((((K1_02*FE0_f0_C1_D100[ip][j] + K1_12*FE0_f0_C1_D010[ip][j] + K1_22*FE0_f0_C1_D001[ip][j]))*0.5)*n02 + (((K1_01*FE0_f0_C1_D100[ip][j] + K1_11*FE0_f0_C1_D010[ip][j] + K1_21*FE0_f0_C1_D001[ip][j]))*0.5)*n01 + (((K1_00*FE0_f0_C1_D100[ip][j] + K1_10*FE0_f0_C1_D010[ip][j] + K1_20*FE0_f0_C1_D001[ip][j]))*0.5)*n00))*(-1.0))*FE0_f0_C1[ip][k] + ((((((K1_00*FE0_f0_C1_D100[ip][k] + K1_10*FE0_f0_C1_D010[ip][k] + K1_20*FE0_f0_C1_D001[ip][k]))*0.5)*n00 + (((K1_01*FE0_f0_C1_D100[ip][k] + K1_11*FE0_f0_C1_D010[ip][k] + K1_21*FE0_f0_C1_D001[ip][k]))*0.5)*n01 + (((K1_02*FE0_f0_C1_D100[ip][k] + K1_12*FE0_f0_C1_D010[ip][k] + K1_22*FE0_f0_C1_D001[ip][k]))*0.5)*n02))*FE0_f0_C1[ip][j])*(-1.0)))*W3[ip]*det;
            }// end loop over 'k'
          }// end loop over 'j'
        }// end loop over 'ip'
          break;
        }
      case 1:
        {
          // Total number of operations to compute element tensor (from this point): 45312
        
        // Loop quadrature points for integral.
        // Number of operations to compute element tensor for following IP loop = 45312
        for (unsigned int ip = 0; ip < 3; ip++)
        {
          
          // Number of operations for primary indices: 15104
          for (unsigned int j = 0; j < 8; j++)
          {
            for (unsigned int k = 0; k < 8; k++)
            {
              // Number of operations to compute entry: 59
              A[j*16 + (k + 8)] += (((FE0_f3_C0[ip][j]*(-1.0))*117.451261750142)*FE0_f1_C1[ip][k] + (((((((K1_00*FE0_f0_C1_D100[ip][k] + K1_10*FE0_f0_C1_D010[ip][k] + K1_20*FE0_f0_C1_D001[ip][k]))*0.5)*n00 + (((K1_01*FE0_f0_C1_D100[ip][k] + K1_11*FE0_f0_C1_D010[ip][k] + K1_21*FE0_f0_C1_D001[ip][k]))*0.5)*n01 + (((K1_02*FE0_f0_C1_D100[ip][k] + K1_12*FE0_f0_C1_D010[ip][k] + K1_22*FE0_f0_C1_D001[ip][k]))*0.5)*n02))*(FE0_f3_C0[ip][j]*(-1.0)))*(-1.0) + ((((((K0_00*FE0_f0_C0_D100[ip][j] + K0_10*FE0_f0_C0_D010[ip][j] + K0_20*FE0_f0_C0_D001[ip][j]))*0.5)*n00 + (((K0_01*FE0_f0_C0_D100[ip][j] + K0_11*FE0_f0_C0_D010[ip][j] + K0_21*FE0_f0_C0_D001[ip][j]))*0.5)*n01 + (((K0_02*FE0_f0_C0_D100[ip][j] + K0_12*FE0_f0_C0_D010[ip][j] + K0_22*FE0_f0_C0_D001[ip][j]))*0.5)*n02))*(-1.0))*FE0_f1_C1[ip][k]))*W3[ip]*det;
              // Number of operations to compute entry: 59
              A[(j + 8)*16 + k] += ((((((((K1_02*FE0_f0_C1_D100[ip][j] + K1_12*FE0_f0_C1_D010[ip][j] + K1_22*FE0_f0_C1_D001[ip][j]))*0.5)*n02 + (((K1_01*FE0_f0_C1_D100[ip][j] + K1_11*FE0_f0_C1_D010[ip][j] + K1_21*FE0_f0_C1_D001[ip][j]))*0.5)*n01 + (((K1_00*FE0_f0_C1_D100[ip][j] + K1_10*FE0_f0_C1_D010[ip][j] + K1_20*FE0_f0_C1_D001[ip][j]))*0.5)*n00))*(-1.0))*(FE0_f3_C0[ip][k]*(-1.0)) + ((((((K0_00*FE0_f0_C0_D100[ip][k] + K0_10*FE0_f0_C0_D010[ip][k] + K0_20*FE0_f0_C0_D001[ip][k]))*0.5)*n00 + (((K0_02*FE0_f0_C0_D100[ip][k] + K0_12*FE0_f0_C0_D010[ip][k] + K0_22*FE0_f0_C0_D001[ip][k]))*0.5)*n02 + (((K0_01*FE0_f0_C0_D100[ip][k] + K0_11*FE0_f0_C0_D010[ip][k] + K0_21*FE0_f0_C0_D001[ip][k]))*0.5)*n01))*FE0_f1_C1[ip][j])*(-1.0)) + FE0_f1_C1[ip][j]*117.451261750142*(FE0_f3_C0[ip][k]*(-1.0)))*W3[ip]*det;
              // Number of operations to compute entry: 61
              A[j*16 + k] += ((((((((K0_00*FE0_f0_C0_D100[ip][k] + K0_10*FE0_f0_C0_D010[ip][k] + K0_20*FE0_f0_C0_D001[ip][k]))*0.5)*n00 + (((K0_02*FE0_f0_C0_D100[ip][k] + K0_12*FE0_f0_C0_D010[ip][k] + K0_22*FE0_f0_C0_D001[ip][k]))*0.5)*n02 + (((K0_01*FE0_f0_C0_D100[ip][k] + K0_11*FE0_f0_C0_D010[ip][k] + K0_21*FE0_f0_C0_D001[ip][k]))*0.5)*n01))*(FE0_f3_C0[ip][j]*(-1.0)))*(-1.0) + ((((((K0_00*FE0_f0_C0_D100[ip][j] + K0_10*FE0_f0_C0_D010[ip][j] + K0_20*FE0_f0_C0_D001[ip][j]))*0.5)*n00 + (((K0_01*FE0_f0_C0_D100[ip][j] + K0_11*FE0_f0_C0_D010[ip][j] + K0_21*FE0_f0_C0_D001[ip][j]))*0.5)*n01 + (((K0_02*FE0_f0_C0_D100[ip][j] + K0_12*FE0_f0_C0_D010[ip][j] + K0_22*FE0_f0_C0_D001[ip][j]))*0.5)*n02))*(-1.0))*(FE0_f3_C0[ip][k]*(-1.0))) + ((FE0_f3_C0[ip][j]*(-1.0))*117.451261750142)*(FE0_f3_C0[ip][k]*(-1.0)))*W3[ip]*det;
              // Number of operations to compute entry: 57
              A[(j + 8)*16 + (k + 8)] += (FE0_f1_C1[ip][j]*117.451261750142*FE0_f1_C1[ip][k] + (((((((K1_00*FE0_f0_C1_D100[ip][k] + K1_10*FE0_f0_C1_D010[ip][k] + K1_20*FE0_f0_C1_D001[ip][k]))*0.5)*n00 + (((K1_01*FE0_f0_C1_D100[ip][k] + K1_11*FE0_f0_C1_D010[ip][k] + K1_21*FE0_f0_C1_D001[ip][k]))*0.5)*n01 + (((K1_02*FE0_f0_C1_D100[ip][k] + K1_12*FE0_f0_C1_D010[ip][k] + K1_22*FE0_f0_C1_D001[ip][k]))*0.5)*n02))*FE0_f1_C1[ip][j])*(-1.0) + ((((((K1_02*FE0_f0_C1_D100[ip][j] + K1_12*FE0_f0_C1_D010[ip][j] + K1_22*FE0_f0_C1_D001[ip][j]))*0.5)*n02 + (((K1_01*FE0_f0_C1_D100[ip][j] + K1_11*FE0_f0_C1_D010[ip][j] + K1_21*FE0_f0_C1_D001[ip][j]))*0.5)*n01 + (((K1_00*FE0_f0_C1_D100[ip][j] + K1_10*FE0_f0_C1_D010[ip][j] + K1_20*FE0_f0_C1_D001[ip][j]))*0.5)*n00))*(-1.0))*FE0_f1_C1[ip][k]))*W3[ip]*det;
            }// end loop over 'k'
          }// end loop over 'j'
        }// end loop over 'ip'
          break;
        }
      case 2:
        {
          // Total number of operations to compute element tensor (from this point): 45312
        
        // Loop quadrature points for integral.
        // Number of operations to compute element tensor for following IP loop = 45312
        for (unsigned int ip = 0; ip < 3; ip++)
        {
          
          // Number of operations for primary indices: 15104
          for (unsigned int j = 0; j < 8; j++)
          {
            for (unsigned int k = 0; k < 8; k++)
            {
              // Number of operations to compute entry: 59
              A[j*16 + (k + 8)] += ((((((((K0_00*FE0_f0_C0_D100[ip][j] + K0_10*FE0_f0_C0_D010[ip][j] + K0_20*FE0_f0_C0_D001[ip][j]))*0.5)*n00 + (((K0_01*FE0_f0_C0_D100[ip][j] + K0_11*FE0_f0_C0_D010[ip][j] + K0_21*FE0_f0_C0_D001[ip][j]))*0.5)*n01 + (((K0_02*FE0_f0_C0_D100[ip][j] + K0_12*FE0_f0_C0_D010[ip][j] + K0_22*FE0_f0_C0_D001[ip][j]))*0.5)*n02))*(-1.0))*FE0_f2_C1[ip][k] + ((((((K1_00*FE0_f0_C1_D100[ip][k] + K1_10*FE0_f0_C1_D010[ip][k] + K1_20*FE0_f0_C1_D001[ip][k]))*0.5)*n00 + (((K1_01*FE0_f0_C1_D100[ip][k] + K1_11*FE0_f0_C1_D010[ip][k] + K1_21*FE0_f0_C1_D001[ip][k]))*0.5)*n01 + (((K1_02*FE0_f0_C1_D100[ip][k] + K1_12*FE0_f0_C1_D010[ip][k] + K1_22*FE0_f0_C1_D001[ip][k]))*0.5)*n02))*(FE0_f3_C0[ip][j]*(-1.0)))*(-1.0)) + ((FE0_f3_C0[ip][j]*(-1.0))*117.451261750142)*FE0_f2_C1[ip][k])*W3[ip]*det;
              // Number of operations to compute entry: 59
              A[(j + 8)*16 + k] += ((((((((K0_00*FE0_f0_C0_D100[ip][k] + K0_10*FE0_f0_C0_D010[ip][k] + K0_20*FE0_f0_C0_D001[ip][k]))*0.5)*n00 + (((K0_02*FE0_f0_C0_D100[ip][k] + K0_12*FE0_f0_C0_D010[ip][k] + K0_22*FE0_f0_C0_D001[ip][k]))*0.5)*n02 + (((K0_01*FE0_f0_C0_D100[ip][k] + K0_11*FE0_f0_C0_D010[ip][k] + K0_21*FE0_f0_C0_D001[ip][k]))*0.5)*n01))*FE0_f2_C1[ip][j])*(-1.0) + ((((((K1_02*FE0_f0_C1_D100[ip][j] + K1_12*FE0_f0_C1_D010[ip][j] + K1_22*FE0_f0_C1_D001[ip][j]))*0.5)*n02 + (((K1_01*FE0_f0_C1_D100[ip][j] + K1_11*FE0_f0_C1_D010[ip][j] + K1_21*FE0_f0_C1_D001[ip][j]))*0.5)*n01 + (((K1_00*FE0_f0_C1_D100[ip][j] + K1_10*FE0_f0_C1_D010[ip][j] + K1_20*FE0_f0_C1_D001[ip][j]))*0.5)*n00))*(-1.0))*(FE0_f3_C0[ip][k]*(-1.0))) + FE0_f2_C1[ip][j]*117.451261750142*(FE0_f3_C0[ip][k]*(-1.0)))*W3[ip]*det;
              // Number of operations to compute entry: 61
              A[j*16 + k] += ((((((((K0_00*FE0_f0_C0_D100[ip][k] + K0_10*FE0_f0_C0_D010[ip][k] + K0_20*FE0_f0_C0_D001[ip][k]))*0.5)*n00 + (((K0_02*FE0_f0_C0_D100[ip][k] + K0_12*FE0_f0_C0_D010[ip][k] + K0_22*FE0_f0_C0_D001[ip][k]))*0.5)*n02 + (((K0_01*FE0_f0_C0_D100[ip][k] + K0_11*FE0_f0_C0_D010[ip][k] + K0_21*FE0_f0_C0_D001[ip][k]))*0.5)*n01))*(FE0_f3_C0[ip][j]*(-1.0)))*(-1.0) + ((((((K0_00*FE0_f0_C0_D100[ip][j] + K0_10*FE0_f0_C0_D010[ip][j] + K0_20*FE0_f0_C0_D001[ip][j]))*0.5)*n00 + (((K0_01*FE0_f0_C0_D100[ip][j] + K0_11*FE0_f0_C0_D010[ip][j] + K0_21*FE0_f0_C0_D001[ip][j]))*0.5)*n01 + (((K0_02*FE0_f0_C0_D100[ip][j] + K0_12*FE0_f0_C0_D010[ip][j] + K0_22*FE0_f0_C0_D001[ip][j]))*0.5)*n02))*(-1.0))*(FE0_f3_C0[ip][k]*(-1.0))) + ((FE0_f3_C0[ip][j]*(-1.0))*117.451261750142)*(FE0_f3_C0[ip][k]*(-1.0)))*W3[ip]*det;
              // Number of operations to compute entry: 57
              A[(j + 8)*16 + (k + 8)] += (FE0_f2_C1[ip][j]*117.451261750142*FE0_f2_C1[ip][k] + (((((((K1_02*FE0_f0_C1_D100[ip][j] + K1_12*FE0_f0_C1_D010[ip][j] + K1_22*FE0_f0_C1_D001[ip][j]))*0.5)*n02 + (((K1_01*FE0_f0_C1_D100[ip][j] + K1_11*FE0_f0_C1_D010[ip][j] + K1_21*FE0_f0_C1_D001[ip][j]))*0.5)*n01 + (((K1_00*FE0_f0_C1_D100[ip][j] + K1_10*FE0_f0_C1_D010[ip][j] + K1_20*FE0_f0_C1_D001[ip][j]))*0.5)*n00))*(-1.0))*FE0_f2_C1[ip][k] + ((((((K1_00*FE0_f0_C1_D100[ip][k] + K1_10*FE0_f0_C1_D010[ip][k] + K1_20*FE0_f0_C1_D001[ip][k]))*0.5)*n00 + (((K1_01*FE0_f0_C1_D100[ip][k] + K1_11*FE0_f0_C1_D010[ip][k] + K1_21*FE0_f0_C1_D001[ip][k]))*0.5)*n01 + (((K1_02*FE0_f0_C1_D100[ip][k] + K1_12*FE0_f0_C1_D010[ip][k] + K1_22*FE0_f0_C1_D001[ip][k]))*0.5)*n02))*FE0_f2_C1[ip][j])*(-1.0)))*W3[ip]*det;
            }// end loop over 'k'
          }// end loop over 'j'
        }// end loop over 'ip'
          break;
        }
      case 3:
        {
          // Total number of operations to compute element tensor (from this point): 45312
        
        // Loop quadrature points for integral.
        // Number of operations to compute element tensor for following IP loop = 45312
        for (unsigned int ip = 0; ip < 3; ip++)
        {
          
          // Number of operations for primary indices: 15104
          for (unsigned int j = 0; j < 8; j++)
          {
            for (unsigned int k = 0; k < 8; k++)
            {
              // Number of operations to compute entry: 59
              A[j*16 + (k + 8)] += (((FE0_f3_C0[ip][j]*(-1.0))*117.451261750142)*FE0_f3_C1[ip][k] + (((((((K1_00*FE0_f0_C1_D100[ip][k] + K1_10*FE0_f0_C1_D010[ip][k] + K1_20*FE0_f0_C1_D001[ip][k]))*0.5)*n00 + (((K1_01*FE0_f0_C1_D100[ip][k] + K1_11*FE0_f0_C1_D010[ip][k] + K1_21*FE0_f0_C1_D001[ip][k]))*0.5)*n01 + (((K1_02*FE0_f0_C1_D100[ip][k] + K1_12*FE0_f0_C1_D010[ip][k] + K1_22*FE0_f0_C1_D001[ip][k]))*0.5)*n02))*(FE0_f3_C0[ip][j]*(-1.0)))*(-1.0) + ((((((K0_00*FE0_f0_C0_D100[ip][j] + K0_10*FE0_f0_C0_D010[ip][j] + K0_20*FE0_f0_C0_D001[ip][j]))*0.5)*n00 + (((K0_01*FE0_f0_C0_D100[ip][j] + K0_11*FE0_f0_C0_D010[ip][j] + K0_21*FE0_f0_C0_D001[ip][j]))*0.5)*n01 + (((K0_02*FE0_f0_C0_D100[ip][j] + K0_12*FE0_f0_C0_D010[ip][j] + K0_22*FE0_f0_C0_D001[ip][j]))*0.5)*n02))*(-1.0))*FE0_f3_C1[ip][k]))*W3[ip]*det;
              // Number of operations to compute entry: 59
              A[(j + 8)*16 + k] += (FE0_f3_C1[ip][j]*117.451261750142*(FE0_f3_C0[ip][k]*(-1.0)) + (((((((K0_00*FE0_f0_C0_D100[ip][k] + K0_10*FE0_f0_C0_D010[ip][k] + K0_20*FE0_f0_C0_D001[ip][k]))*0.5)*n00 + (((K0_02*FE0_f0_C0_D100[ip][k] + K0_12*FE0_f0_C0_D010[ip][k] + K0_22*FE0_f0_C0_D001[ip][k]))*0.5)*n02 + (((K0_01*FE0_f0_C0_D100[ip][k] + K0_11*FE0_f0_C0_D010[ip][k] + K0_21*FE0_f0_C0_D001[ip][k]))*0.5)*n01))*FE0_f3_C1[ip][j])*(-1.0) + ((((((K1_02*FE0_f0_C1_D100[ip][j] + K1_12*FE0_f0_C1_D010[ip][j] + K1_22*FE0_f0_C1_D001[ip][j]))*0.5)*n02 + (((K1_01*FE0_f0_C1_D100[ip][j] + K1_11*FE0_f0_C1_D010[ip][j] + K1_21*FE0_f0_C1_D001[ip][j]))*0.5)*n01 + (((K1_00*FE0_f0_C1_D100[ip][j] + K1_10*FE0_f0_C1_D010[ip][j] + K1_20*FE0_f0_C1_D001[ip][j]))*0.5)*n00))*(-1.0))*(FE0_f3_C0[ip][k]*(-1.0))))*W3[ip]*det;
              // Number of operations to compute entry: 61
              A[j*16 + k] += ((((((((K0_00*FE0_f0_C0_D100[ip][k] + K0_10*FE0_f0_C0_D010[ip][k] + K0_20*FE0_f0_C0_D001[ip][k]))*0.5)*n00 + (((K0_02*FE0_f0_C0_D100[ip][k] + K0_12*FE0_f0_C0_D010[ip][k] + K0_22*FE0_f0_C0_D001[ip][k]))*0.5)*n02 + (((K0_01*FE0_f0_C0_D100[ip][k] + K0_11*FE0_f0_C0_D010[ip][k] + K0_21*FE0_f0_C0_D001[ip][k]))*0.5)*n01))*(FE0_f3_C0[ip][j]*(-1.0)))*(-1.0) + ((((((K0_00*FE0_f0_C0_D100[ip][j] + K0_10*FE0_f0_C0_D010[ip][j] + K0_20*FE0_f0_C0_D001[ip][j]))*0.5)*n00 + (((K0_01*FE0_f0_C0_D100[ip][j] + K0_11*FE0_f0_C0_D010[ip][j] + K0_21*FE0_f0_C0_D001[ip][j]))*0.5)*n01 + (((K0_02*FE0_f0_C0_D100[ip][j] + K0_12*FE0_f0_C0_D010[ip][j] + K0_22*FE0_f0_C0_D001[ip][j]))*0.5)*n02))*(-1.0))*(FE0_f3_C0[ip][k]*(-1.0))) + ((FE0_f3_C0[ip][j]*(-1.0))*117.451261750142)*(FE0_f3_C0[ip][k]*(-1.0)))*W3[ip]*det;
              // Number of operations to compute entry: 57
              A[(j + 8)*16 + (k + 8)] += (FE0_f3_C1[ip][j]*117.451261750142*FE0_f3_C1[ip][k] + (((((((K1_02*FE0_f0_C1_D100[ip][j] + K1_12*FE0_f0_C1_D010[ip][j] + K1_22*FE0_f0_C1_D001[ip][j]))*0.5)*n02 + (((K1_01*FE0_f0_C1_D100[ip][j] + K1_11*FE0_f0_C1_D010[ip][j] + K1_21*FE0_f0_C1_D001[ip][j]))*0.5)*n01 + (((K1_00*FE0_f0_C1_D100[ip][j] + K1_10*FE0_f0_C1_D010[ip][j] + K1_20*FE0_f0_C1_D001[ip][j]))*0.5)*n00))*(-1.0))*FE0_f3_C1[ip][k] + ((((((K1_00*FE0_f0_C1_D100[ip][k] + K1_10*FE0_f0_C1_D010[ip][k] + K1_20*FE0_f0_C1_D001[ip][k]))*0.5)*n00 + (((K1_01*FE0_f0_C1_D100[ip][k] + K1_11*FE0_f0_C1_D010[ip][k] + K1_21*FE0_f0_C1_D001[ip][k]))*0.5)*n01 + (((K1_02*FE0_f0_C1_D100[ip][k] + K1_12*FE0_f0_C1_D010[ip][k] + K1_22*FE0_f0_C1_D001[ip][k]))*0.5)*n02))*FE0_f3_C1[ip][j])*(-1.0)))*W3[ip]*det;
            }// end loop over 'k'
          }// end loop over 'j'
        }// end loop over 'ip'
          break;
        }
      }
      
        break;
      }
    }
    
  }

  /// Tabulate the tensor for the contribution from a local interior facet
  /// using the specified reference cell quadrature points/weights
  virtual void tabulate_tensor(double* A,
                               const double * const * w,
                               const ufc::cell& c,
                               unsigned int num_quadrature_points,
                               const double * const * quadrature_points,
                               const double* quadrature_weights) const
  {
    throw std::runtime_error("Quadrature version of tabulate_tensor not yet implemented (introduced in UFC 2.0).");
  }

};

/// This class defines the interface for the assembly of the global
/// tensor corresponding to a form with r + n arguments, that is, a
/// mapping
///
///     a : V1 x V2 x ... Vr x W1 x W2 x ... x Wn -> R
///
/// with arguments v1, v2, ..., vr, w1, w2, ..., wn. The rank r
/// global tensor A is defined by
///
///     A = a(V1, V2, ..., Vr, w1, w2, ..., wn),
///
/// where each argument Vj represents the application to the
/// sequence of basis functions of Vj and w1, w2, ..., wn are given
/// fixed functions (coefficients).

class ffc_form_093e70ccb31b6928ba64954c37ae6fa88f3df017_form_0: public ufc::form
{
public:

  /// Constructor
  ffc_form_093e70ccb31b6928ba64954c37ae6fa88f3df017_form_0() : ufc::form()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ffc_form_093e70ccb31b6928ba64954c37ae6fa88f3df017_form_0()
  {
    // Do nothing
  }

  /// Return a string identifying the form
  virtual const char* signature() const
  {
    return "Form([Integral(IndexSum(Product(Indexed(ComponentTensor(Indexed(SpatialDerivative(Argument(MixedElement(*[FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None)], **{'value_shape': (2,) }), 0), MultiIndex((Index(0),), {Index(0): 3})), MultiIndex((FixedIndex(0),), {})), MultiIndex((Index(0),), {Index(0): 3})), MultiIndex((Index(1),), {Index(1): 3})), Indexed(ComponentTensor(Indexed(SpatialDerivative(Argument(MixedElement(*[FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None)], **{'value_shape': (2,) }), 1), MultiIndex((Index(2),), {Index(2): 3})), MultiIndex((FixedIndex(0),), {})), MultiIndex((Index(2),), {Index(2): 3})), MultiIndex((Index(1),), {Index(1): 3}))), MultiIndex((Index(1),), {Index(1): 3})), Measure('cell', 0, None)), Integral(IndexSum(Product(Indexed(ComponentTensor(Indexed(SpatialDerivative(Argument(MixedElement(*[FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None)], **{'value_shape': (2,) }), 0), MultiIndex((Index(3),), {Index(3): 3})), MultiIndex((FixedIndex(1),), {})), MultiIndex((Index(3),), {Index(3): 3})), MultiIndex((Index(4),), {Index(4): 3})), Indexed(ComponentTensor(Indexed(SpatialDerivative(Argument(MixedElement(*[FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None)], **{'value_shape': (2,) }), 1), MultiIndex((Index(5),), {Index(5): 3})), MultiIndex((FixedIndex(1),), {})), MultiIndex((Index(5),), {Index(5): 3})), MultiIndex((Index(4),), {Index(4): 3}))), MultiIndex((Index(4),), {Index(4): 3})), Measure('cell', 1, None)), Integral(Sum(Product(Product(FloatValue(117.45126175014225, (), (), {}), Sum(NegativeRestricted(Indexed(Argument(MixedElement(*[FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None)], **{'value_shape': (2,) }), 0), MultiIndex((FixedIndex(1),), {}))), Product(IntValue(-1, (), (), {}), PositiveRestricted(Indexed(Argument(MixedElement(*[FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None)], **{'value_shape': (2,) }), 0), MultiIndex((FixedIndex(0),), {})))))), Sum(NegativeRestricted(Indexed(Argument(MixedElement(*[FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None)], **{'value_shape': (2,) }), 1), MultiIndex((FixedIndex(1),), {}))), Product(IntValue(-1, (), (), {}), PositiveRestricted(Indexed(Argument(MixedElement(*[FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None)], **{'value_shape': (2,) }), 1), MultiIndex((FixedIndex(0),), {})))))), Sum(Product(IntValue(-1, (), (), {}), Product(IndexSum(Product(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(Sum(ComponentTensor(NegativeRestricted(Indexed(SpatialDerivative(Argument(MixedElement(*[FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None)], **{'value_shape': (2,) }), 1), MultiIndex((Index(6),), {Index(6): 3})), MultiIndex((FixedIndex(1),), {}))), MultiIndex((Index(6),), {Index(6): 3})), ComponentTensor(PositiveRestricted(Indexed(SpatialDerivative(Argument(MixedElement(*[FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None)], **{'value_shape': (2,) }), 1), MultiIndex((Index(7),), {Index(7): 3})), MultiIndex((FixedIndex(0),), {}))), MultiIndex((Index(7),), {Index(7): 3}))), MultiIndex((Index(8),), {Index(8): 3}))), MultiIndex((Index(8),), {Index(8): 3})), MultiIndex((Index(9),), {Index(9): 3})), Indexed(PositiveRestricted(FacetNormal(Cell('tetrahedron', Space(3)))), MultiIndex((Index(9),), {Index(9): 3}))), MultiIndex((Index(9),), {Index(9): 3})), Sum(NegativeRestricted(Indexed(Argument(MixedElement(*[FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None)], **{'value_shape': (2,) }), 0), MultiIndex((FixedIndex(1),), {}))), Product(IntValue(-1, (), (), {}), PositiveRestricted(Indexed(Argument(MixedElement(*[FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None)], **{'value_shape': (2,) }), 0), MultiIndex((FixedIndex(0),), {}))))))), Product(Product(IntValue(-1, (), (), {}), IndexSum(Product(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(Sum(ComponentTensor(NegativeRestricted(Indexed(SpatialDerivative(Argument(MixedElement(*[FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None)], **{'value_shape': (2,) }), 0), MultiIndex((Index(10),), {Index(10): 3})), MultiIndex((FixedIndex(1),), {}))), MultiIndex((Index(10),), {Index(10): 3})), ComponentTensor(PositiveRestricted(Indexed(SpatialDerivative(Argument(MixedElement(*[FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None)], **{'value_shape': (2,) }), 0), MultiIndex((Index(11),), {Index(11): 3})), MultiIndex((FixedIndex(0),), {}))), MultiIndex((Index(11),), {Index(11): 3}))), MultiIndex((Index(12),), {Index(12): 3}))), MultiIndex((Index(12),), {Index(12): 3})), MultiIndex((Index(13),), {Index(13): 3})), Indexed(PositiveRestricted(FacetNormal(Cell('tetrahedron', Space(3)))), MultiIndex((Index(13),), {Index(13): 3}))), MultiIndex((Index(13),), {Index(13): 3}))), Sum(NegativeRestricted(Indexed(Argument(MixedElement(*[FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None)], **{'value_shape': (2,) }), 1), MultiIndex((FixedIndex(1),), {}))), Product(IntValue(-1, (), (), {}), PositiveRestricted(Indexed(Argument(MixedElement(*[FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None)], **{'value_shape': (2,) }), 1), MultiIndex((FixedIndex(0),), {})))))))), Measure('interior_facet', 2, None))])";
  }

  /// Return the rank of the global tensor (r)
  virtual unsigned int rank() const
  {
    return 2;
  }

  /// Return the number of coefficients (n)
  virtual unsigned int num_coefficients() const
  {
    return 0;
  }

  /// Return the number of cell domains
  virtual unsigned int num_cell_domains() const
  {
    return 2;
  }

  /// Return the number of exterior facet domains
  virtual unsigned int num_exterior_facet_domains() const
  {
    return 0;
  }

  /// Return the number of interior facet domains
  virtual unsigned int num_interior_facet_domains() const
  {
    return 3;
  }

  /// Create a new finite element for argument function i
  virtual ufc::finite_element* create_finite_element(unsigned int i) const
  {
    switch (i)
    {
    case 0:
      {
        return new ffc_form_093e70ccb31b6928ba64954c37ae6fa88f3df017_finite_element_1();
        break;
      }
    case 1:
      {
        return new ffc_form_093e70ccb31b6928ba64954c37ae6fa88f3df017_finite_element_1();
        break;
      }
    }
    
    return 0;
  }

  /// Create a new dofmap for argument function i
  virtual ufc::dofmap* create_dofmap(unsigned int i) const
  {
    switch (i)
    {
    case 0:
      {
        return new ffc_form_093e70ccb31b6928ba64954c37ae6fa88f3df017_dofmap_1();
        break;
      }
    case 1:
      {
        return new ffc_form_093e70ccb31b6928ba64954c37ae6fa88f3df017_dofmap_1();
        break;
      }
    }
    
    return 0;
  }

  /// Create a new cell integral on sub domain i
  virtual ufc::cell_integral* create_cell_integral(unsigned int i) const
  {
    switch (i)
    {
    case 0:
      {
        return new ffc_form_093e70ccb31b6928ba64954c37ae6fa88f3df017_cell_integral_0_0();
        break;
      }
    case 1:
      {
        return new ffc_form_093e70ccb31b6928ba64954c37ae6fa88f3df017_cell_integral_0_1();
        break;
      }
    }
    
    return 0;
  }

  /// Create a new exterior facet integral on sub domain i
  virtual ufc::exterior_facet_integral* create_exterior_facet_integral(unsigned int i) const
  {
    return 0;
  }

  /// Create a new interior facet integral on sub domain i
  virtual ufc::interior_facet_integral* create_interior_facet_integral(unsigned int i) const
  {
    switch (i)
    {
    case 2:
      {
        return new ffc_form_093e70ccb31b6928ba64954c37ae6fa88f3df017_interior_facet_integral_0_2();
        break;
      }
    }
    
    return 0;
  }

};

#endif
